#summary Extra and advanced system configuration options (SCST settings, HA, etc.).

=== Kernel Modules ===
The ESOS kernels (production / debug) are built with most drivers built-in. Generally the HBA, HCA, etc. drivers are left as modules in case the user would like to tweak any parameters via module options. The SCST core, device handlers, and target drivers are also modules.

If you do find you would like to customize any of the module parameters, first exit to the shell (Interface -> Exit to Shell) and then you can create the file `/etc/modprobe.conf` (which will be sync'd to USB if it exists). Below is an example to see the format of the file, we are not recommending you use these settings, its just a sample.
{{{
options scst scst_threads=20
options ib_srpt srpt_sq_size=32
}}}

You can see the valid parameters for a module using the `modinfo` command. See the [http://scst.sourceforge.net SCST] documentation for possible information on tweaking any module parameters.

Synchronize your configuration:
{{{
conf_sync.sh
}}}

<br>

=== Extra Configuration ===
If you find that you need to run any extra commands before or after starting SCST (via RA, or rc/init), there are two files you can create/edit in /etc:
  * /etc/pre-scst_xtra_conf
  * /etc/post-scst_xtra_conf
These files can be treated as shell scripts; if either exists, they will be executed during start-up with `sh`.

The first file (/etc/pre-scst_xtra_conf) will be executed (if it exists) _before_ any part of SCST is loaded. An example of something you may want to run before loading SCST is adjust the read-ahead value for a back-storage block device (eg, `blockdev --setra 2048 /dev/sdb`).

The second file (/etc/post-scst_xtra_conf) will be executed (if it exists) _after_ SCST is fully loaded and configured. If you want to adjust the SMP IRQ affinity for the system, this would probably be a good place for it.

Synchronize your configuration:
{{{
conf_sync.sh
}}}

<br>

=== High Availability (HA) / Clustering via the Pacemaker + Corosync Stack ===
A full featured cluster stack is included with ESOS. The stack consists of Pacemaker, Corosync, and crmsh. The resource-agents and fence-agents packages are also included along with other supporting tools/utilities (eg, Python, ipmitool, etc.).

The setup and configuration of the cluster stack is well beyond the scope of this ESOS documentation, however, there is tons of information out there on Pacemaker/Corosync. We suggest starting with the following guides for configuration (obviously, all of the cluster components are already installed in ESOS):
  * [http://clusterlabs.org/doc/en-US/Pacemaker/1.1-crmsh/html/Clusters_from_Scratch/index.html Clusters from Scratch]
  * [http://clusterlabs.org/doc/en-US/Pacemaker/1.1-crmsh/html/Pacemaker_Explained/index.html Pacemaker Explained]

A SCST resource agent (ocf:esos:scst) is included with ESOS. It can be configured either as a normal resource (start/stop) or a multi-state resource (master/slave); the MS resource mode relies on the implicit Asymmetric Logical Unit Assignment (ALUA) functionality in SCST, so this must also be configured when using `ocf:esos:scst` as master/slave.

When using `ocf:esos:scst` as a "normal" resource, the supporting user-land daemons and SCST modules are loaded when started, and when stopped, all daemons and modules are unloaded. This is important to know since when loading SCST, it expects whatever devices you have defined in /etc/scst.conf to be available (eg, /dev/drbd0 block device, or a virtual disk file on a file system). SCST will remove these from the configuration if they are not available when started; please keep this in mind when designing your cluster.

An example of the SCST resource configuration for two ESOS nodes (one started, one stopped) might look something like this:
{{{
crm
cib new scst
configure primitive p_scst ocf:esos:scst
configure show
cib commit scst
quit
}}}

An example of the SCST resource configuration for two ESOS nodes (both started) might look something like this:
{{{
crm
cib new scst
configure primitive p_scst ocf:esos:scst
configure clone clone_scst p_scst \
meta clone-max="2" clone-node-max="1" notify="true" interleave="true"
configure show
cib commit scst
quit
}}}



<br>

=== InfiniBand Drivers ===
All of the InfiniBand drivers in ESOS are built as modules; they are all the in-line Linux kernel versions (not OFED). Most popular IB HCAs are supported including IP over InfiniBand (IPoIB). See the [03_Supported_Hardware] wiki page for more details.

ESOS uses a /etc/rc.d/rc.openibd rc script, similar to the OFED init script, openibd. Like the OFED version, we employ the use of the `/etc/infiniband/openib.conf` module configuration file. Edit this file to control which hardware drivers, and IB modules are loaded. _Note: IPoIB is disabled by default. When using Windows Server 2012 initiators with IPoIB, apparently Connected Mode (CM) is not supported._

Synchronize your configuration:
{{{
conf_sync.sh
}}}

<br>

=== InfiniBand Subnet Manager ===
The OpenSM IB subnet manager software is also included with ESOS. It is disabled by default, but can be enabled editing the /etc/rc.conf file and setting `rc.opensm_enable` to 'YES'.

The OpenSM configuration files should be created in the /etc directory (/etc/opensm is the default location). For additional OpenSM IB subnet manager help/information, please see the related OFED documentation.

Synchronize your configuration:
{{{
conf_sync.sh
}}}

<br>

=== Enabling/Disabling System Services ===
Some of the ESOS system services can be enabled/disabled; typically this is needed if your specific configuration or setup has conflicting services. A common example is using DRBD on a stand-alone ESOS server, versus using DRBD in a ESOS cluster. In the latter scenario, you would typically want the cluster stack to manage the DRBD resources, so you would disable the `rc.drbd` service.

Edit the "/etc/rc.conf" file and use 'YES' to enable a service, and 'NO' to disable a service. You can then use the following CLI command syntax to start/stop a service without rebooting:
{{{
/etc/rc.d/rc.service_name [start | stop]
}}}

<br>

=== What's Next ===
From here, you can now SSH into your ESOS storage server, configure your back-storage and setup your targets. Continue with the [31_Basic_Back_End_Storage_Setup] document.