#summary Configuring your back-storage, setting up target devices, etc.

ESOS is based on the SCST project, and it really is the core of ESOS. SCST provides a number of different features and I/O modes (pass-through, FILEIO, BLOCKIO, etc.). ESOS documentation will really focus on just one of these I/O modes, BLOCKIO, since it generally works quite well with high-end storage HBAs found in enterprise environments. Please refer to the SCST documentation for more in-depth configuration, or if you'd like to use I/O modes other than BLOCKIO (it should all work on ESOS, let us know if that's not the case).

There are two broad steps when configuring ESOS storage: The first is configuring your back-storage device which is typically a high-end RAID controller, or can be anything else that appears as a SCSI block device in Linux. The second step is configuring your front side target devices, the targets that are made available via your SAN. Please see below for examples -- pick your back-storage type, and then pick your SAN (target) type.

<wiki:toc max_depth="4" />

<br>

==== Back-Storage Setup: LSI MegaRAID ====
The LSI Logic "MegaCLI" utility is included with ESOS. The utility allows you to create/delete/modify volumes (logical drives) on your MegaRAID controller. Below are a few examples of using the MegaCLI tool (MegaCli64 for us). A nice handy cheat sheet is located [http://tools.rapidsoft.de/perc/perc-cheat-sheet.html here]. Or for a very in-depth document, consult the user guide available on LSI Logic's web site.

Get adapter information for the first MegaRAID adapter (0):
{{{
MegaCli64 -AdpAllInfo -a0
}}}

A list of all the adapter's physical drives:
{{{
MegaCli64 -PDList -a0
}}}

All of the logical drives for the adapter:
{{{
MegaCli64 -LDInfo -Lall -a0
}}}

Delete logical drive 0:
{{{
MegaCli64 -CfgLdDel -L0 -a0
}}}

Create a new RAID5 logical drive, with three physical disks, adaptive read-ahead (ADRA) and write cache enabled (WB):
{{{
MegaCli64 -CfgLDAdd -R5[8:0,8:1,8:2] WB ADRA -a0
}}}

Create a new RAID0 logical drive, with two physical disks, no read-ahead (NORA) and write cache disabled (WT):
{{{
MegaCli64 -CfgLDAdd -R0[8:0,8:1] WT NORA -a0
}}}

After you have created your new volume(s) you will need to find and record the SCSI device node (eg, /dev/sdz). You can easily find this using `lsscsi` or checking `dmesg`. You can now move on to configuring your front-side targets.

<br>

==== Back-Storage Setup: Adaptec AACRAID ====
The arcconf utility is also included with ESOS for configuring Adaptec RAID controllers from inside the OS. This tool should work with most/all Adaptec SATA/SAS RAID controllers.

See all controller/drive/volume information for controller # 1:
{{{
arcconf GETCONFIG 1
}}}

Delete logical device(volume) 1 on controller 1:
{{{
arcconf DELETE 1 LOGICALDRIVE 1
}}}

Make a new RAID5 volume on controller 1 using three disks (channel 0, device numbers 2, 3, 4) with read cache enabled and write cache enabled:
{{{
arcconf CREATE 1 LOGICALDRIVE Rcache RON Wcache WB MAX 5 0 2 0 3 0 4
}}}

Make a new RAID0 volume on controller 1 using two disks (channel 0, device numbers 2, 3) with read cache disabled and write cache disabled:
{{{
arcconf CREATE 1 LOGICALDRIVE Rcache ROFF Wcache WT MAX 0 0 2 0 3
}}}

Once you've created a new volume on your Adaptec RAID controller, grab the SCSI device node (`lsscsi` works well) and continue with one of the target configuration sections below.

<br>

==== Back-Storage Setup: Other ====
Other RAID controllers are supported, however, not all of them necessarily have a CLI tool for configuring volumes, adapter settings, etc. from inside of ESOS. See the [Supported_Hardware] wiki page for a current list of supported controllers.

You can still use these other controllers with ESOS, you will just need to configure your volumes / logical drives "outside" of ESOS -- via the BIOS.

If you find that your favorite "enterprise class" RAID controller is not supported by ESOS, please let us know on the esos-users Google Group. It would also be helpful to know if there are any CLI management tools that can be used to configure these controllers from inside the OS.

<br>

==== Configuring Targets: Fibre Channel ====
Below is an example of configuring a BLOCKIO device using SCST. In the example we are using a Linux block device (RAID volume, etc.) as the back-storage device. There are lots of options with SCST -- instead of using a raw block device, you could partition the device and put a filesystem on and then create multiple virtual devices using files. See the SCST documentation for more information.

The first step is creating the virtual disk using BLOCKIO mode (vdisk_blockio):
{{{
scstadmin -open_dev test_disk_1 -handler vdisk_blockio -attributes filename=/dev/sda,blocksize=512
scstadmin -set_dev_attr test_disk_1 -attributes threads_pool_type=per_initiator,threads_num=4
}}}

In our example, the ESOS storage server has two QLogic FC HBAs connected to two fabrics (two independent Fibre Channel switches). The other server that will be using the storage volume we are configuring (initiators) also has two FC HBAs connected to the fabrics and zoned appropriately.

We will now create two security groups, one for each Fibre Channel target. This allows you to do some fine tuning with LUN masking and a few other attributes (io_grouping_type, etc.).
{{{
scstadmin -add_group myserver -driver qla2x00t -target 21:00:00:1b:32:01:6b:11
scstadmin -add_group myserver -driver qla2x00t -target 21:01:00:1b:32:21:6b:11
}}}

Next we need to know the WWN's of the initiators on our server that will be using the storage. A couple different ways of getting this... you could look through the system configuration information that the OS provides on the server, you could grab them from your Fibre Channel switches, or you could get them from inside ESOS by looking at data in sysfs. Take a look here:
{{{
cat /sys/class/fc_host/host8/device/scsi_host/host8/port_database
cat /sys/class/fc_host/host9/device/scsi_host/host9/port_database
}}}

Once you have the WWN's of the server's initiators, you can add them to the security groups:
{{{
scstadmin -add_init 21:00:00:e0:8b:9e:ce:24 -driver qla2x00t -target 21:00:00:1b:32:01:6b:11 -group myserver
scstadmin -add_init 21:01:00:e0:8b:be:ce:24 -driver qla2x00t -target 21:01:00:1b:32:21:6b:11 -group myserver
}}}

Now we can add the LUN's for our device to each target. *Be sure to start LU numbering with 0 (zero) unless you are sure the initiator side has sparse LUN support (eg, VMware ESX).* Its probably also best to keep the LUN's the same for each server/volume combination.
{{{
scstadmin -add_lun 0 -driver qla2x00t -target 21:00:00:1b:32:01:6b:11 -group myserver -device test_disk_1
scstadmin -add_lun 0 -driver qla2x00t -target 21:01:00:1b:32:21:6b:11 -group myserver -device test_disk_1
}}}

Finally, we can enable our targets:
{{{
scstadmin -enable_target 21:00:00:1b:32:01:6b:11 -driver qla2x00t
scstadmin -enable_target 21:01:00:1b:32:21:6b:11 -driver qla2x00t
}}}

Be sure to save your SCST configuration to a flat file after you have made changes:
{{{
scstadmin -nonkey -write_config /etc/scst.conf
}}}

You will need to do an HBA re-scan on the initiator side to find the new targets (SCSI disk); or on some operating systems, issuing a LIP will do the trick:
{{{
scstadmin -issue_lip
}}}

You should now have a brand new volume available on the initiator side. Again, please see the SCST documentation -- the above was just one example, SCST can do a whole lot more.

<br>

==== Configuring Targets: iSCSI ====
In this example, we will be making use of SCST's BLOCKIO mode for our storage device. ESOS supports several different NIC / CNA / TCP Offload Engine (TOE) combinations; see the [Supported_Hardware] document for more information.

The first step is creating the virtual disk using BLOCKIO mode (vdisk_blockio):
{{{
scstadmin -open_dev test_disk_1 -handler vdisk_blockio -attributes filename=/dev/sda,blocksize=512
scstadmin -set_dev_attr test_disk_1 -attributes threads_pool_type=per_initiator,threads_num=4
}}}

Before creating the iSCSI target(s) in SCST, you will need to come up with a iSCSI Qualified Name (IQN) for each target on your ESOS storage server. [http://tools.ietf.org/html/rfc3721#section-1.1 RFC 3721] contains more information and examples on IQN, but briefly it goes like this (example taken from Wikipedia):

{{{
                 Naming     Optional String Defined By
    Type  Date   Authority  "example.com" Naming Authority
    +--++------++---------++-----------------------------+
    |  ||      ||         ||                             |

    iqn.2001-04.com.example:storage:diskarrays-sn-a8675309
    iqn.2001-04.com.example
    iqn.2001-04.com.example:storage.tape1.sys1.xyz
    iqn.2001-04.com.example:storage.disk2.sys1.xyz
}}}

  * 'Type' is always the string "iqn"
  * 'Date' is the date that the naming authority took ownership of the domain in "yyyy-mm" format
  * 'Naming Authority' is the reversed domain name of the authority (eg, example.com is com.example)
  * The last section is optional; prefix with a ':' and give a storage target name specified by the naming authority

Once you have a decided on a name, you can now create the iSCSI target using `scstadmin`:
{{{
scstadmin -add_target iqn.2012-02.local.esoshost:storage1 -driver iscsi
}}}

We can now create a security group for our new iSCSI target so only specified initiators can access the storage:
{{{
scstadmin -add_group myserver -driver iscsi -target iqn.2012-02.local.esoshost:storage1
}}}

Now add an initiator to the group:
{{{
scstadmin -add_init iqn.1991-05.com.microsoft:computer.domain -driver iscsi -target iqn.2012-02.local.esoshost:storage1 -group myserver
}}}

Next we will setup our BLOCKIO device as LUN 0 in our security group:
{{{
scstadmin -add_lun 0 -driver iscsi -target iqn.2012-02.local.esoshost:storage1 -group myserver -device test_disk_1
}}}

Finally we can enable the iSCSI target:
{{{
scstadmin -enable_target iqn.2012-02.local.esoshost:storage1 -driver iscsi
scstadmin -set_drv_attr iscsi -attributes enabled=1
}}}

Don't forget to save your SCST configuration:
{{{
scstadmin -nonkey -write_config /etc/scst.conf
}}}


<br>

==== Configuring Targets: IB / SRP ====
blah