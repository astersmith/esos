#summary More details on the design and internal workings.

=== Introduction ===
ESOS started with an internal need for a fully functioning SCST / Linux system that could easily be deployed to new servers. We also wanted to this Linux "distribution" to be fully optimized for SCST and include necessary RAID controller tools/utilities so new volumes could easily be provisioned/modified from inside the OS.

<br>

=== Included Projects ===
ESOS uses the open source software projects list below; you can check the Makefile for the specific versions (varies by release).
  * Linux kernel
  * SCST
  * BusyBox
  * GRUB
  * SysVinit
  * GLIBC
  * vixie-cron
  * libibumad
  * libibverbs
  * srptools
  * OpenSSH
  * sSMTP
  * Perl
  * OpenSSL
  * e2fsprogs
  * zlib
  * lsscsi
  * sg3_utils
  * groff
  * ncurses
  * kexec-tools
  * GCC (only libstdc++ and libgcc are installed to image)

Several other proprietary pieces are included/installed and some are optional:
  * QLogic firmware images
  * MegaCLI (from LSI Logic)
  * Adaptec Storage Manager (only the arcconf CLI tool is used)

<br>

=== How It Works ===
ESOS boots from a USB flash drive; all of the binaries/files/directories/etc. are loaded into memory on boot. If the USB flash drive fails, the system will keep running normally until the failed flash drive can be addressed (replaced). Configuration files and settings are sync'd to a filesystem since ESOS is volatile (memory resident). Log files are also archived to the USB drive on shutdown/restart or if the filesystem grows too large. This also provides an easy and reversible upgrade procedure: You simply create a new, updated ESOS USB flash drive, copy your configuration to it, and boot the new drive -- if you happen to experience an issue with the new version, you can always boot back into your previous ESOS USB drive.

Here is a high level step-through of the ESOS boot process:
  # The ESOS USB flash drive is used as the BIOS boot device.
  # GRUB is loaded; user can select between ESOS 'Production' or 'Debug' kernel/modules.
  # Selected kernel (and initramfs image) is loaded; initramfs init then takes care of various prep. tasks, initializes tmpfs filesystem (RAM) and then extracts root image into newly created tmpfs filesystem.
  # Control is then passed to init and the rc/init scripts are executed.
  # Running ESOS configuration is synchronized with USB flash drive.
  # Various daemons (sshd, crond, etc.) are started, HBA/HCA/CNA and SCST modules are loaded.
