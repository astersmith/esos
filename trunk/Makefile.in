# $Id$

# Enterprise Storage OS (ESOS) Makefile[.in]
# Makefile is generated from Makefile.in via the configure script.
# Please see the README/INSTALL documents for help.

SRC_DIR		:= @src_dir@
BUILD_DIR	:= @build_dir@
WORK_DIR	:= @work_dir@
DIST_FILES_DIR	:= @dist_files_dir@
PKG_SRC_DIR	:= @pkg_src_dir@
IMAGE_DIR	:= @image_dir@
INITRAMFS_DIR	:= @initramfs_dir@
MOUNT_DIR	:= @mount_dir@

QUIET		:= @
SHELL		:= @bash@

WGET		:= @wget@ -t 5
MKDIR		:= @mkdir@ -p
RM		:= @rm@ -rf
TAR		:= @tar@
CP		:= @cp@ -L
FIND		:= @find@
CPIO		:= @cpio@
GZIP		:= @gzip@ -9
ECHO		:= @echo@
SFDISK		:= @sfdisk@
CAT		:= @cat@
TEST		:= @test@
GREP		:= @grep@
DD		:= @dd@
MKE2FS		:= @mke2fs@
LN		:= @ln@ -sf
MOUNT		:= @mount@
UMOUNT		:= @umount@
SED		:= @sed@
MKNOD		:= @mknod@
TOUCH		:= @touch@
INSTALL		:= @install@ -c
PATCH		:= @patch@
CHOWN		:= @chown@
CHMOD		:= @chmod@
MD5SUM		:= @md5sum@
SHA256SUM	:= @sha256sum@
SLEEP		:= @sleep@
LOSETUP		:= @losetup@
KPARTX		:= @kpartx@
XARGS		:= @xargs@
OPENSSL		:= @openssl@
ZIP		:= @zip@
XZ		:= @xz@
READLINK	:= @readlink@
STRIP		:= @strip@
BZIP2		:= @bzip2@

enable_debug	:= @enable_debug@
enable_gdb	:= @enable_gdb@
enable_valgrind	:= @enable_valgrind@
with_ocs_sdk	:= @with_ocs_sdk@
ocs_sdk_dir	:= @ocs_sdk_dir@
with_uwire	:= @with_uwire@
uwire_dir	:= @uwire_dir@
build_opts	:= @build_opts@

svn_branch	:= trunk
svn_rev		:= $(shell if rev="$$(svnversion $(SRC_DIR) 2>&1)"; \
		then echo "$$rev"; else echo "UNKNOWN"; fi)
opt_suffix	:= $(if $(build_opts),_$(shell for i in $(build_opts); \
		do $(ECHO) -n "$${i:0:1}"; done),)
esos_ver	:= $(svn_branch)_r$(svn_rev)$(opt_suffix)
prod_suffix	:= -esos.prod
debug_suffix	:= -esos.debug

dist_files	= $(addprefix $(DIST_FILES_DIR)/, \
		busybox-1.20.2.tar.bz2 \
		grub-2.00.tar.gz \
		sysvinit-2.88dsf.tar.bz2 \
		glibc-2.12.2.tar.bz2 \
		vixie-cron-4.1.tar.bz2 \
		libibumad-1.3.7.tar.gz \
		libibverbs-1.1.4.tar.gz \
		srptools-0.0.4.tar.gz \
		openssh-5.8p1.tar.gz \
		ssmtp-2.64.tar.bz2 \
		perl-5.12.4.tar.bz2 \
		openssl-1.0.1g.tar.gz \
		e2fsprogs-1.41.14.tar.gz \
		zlib-1.2.5.tar.bz2 \
		lsscsi-0.25.tar.gz \
		sg3_utils-1.37.tar.gz \
		groff-1.21.tar.gz \
		ncurses-5.7.tar.gz \
		qlogic_fw-20140928.tar.gz \
		linux-3.14.19.tar.xz \
		iniparser-3.1.tar.gz \
		cdk-5.0-20120323.tar.gz \
		scst-trunk_r6146.tar.gz \
		scst_qla2xxx-20150323.tar.gz \
		kexec-tools-2.0.7.tar.gz \
		drbd-8.4.4.tar.gz \
		LVM2-2.02.108.tar.gz \
		xfsprogs-3.1.8.tar.gz \
		mdadm-3.3.2.tar.gz \
		parted-2.3.tar.gz \
		gcc-4.4.5_gmp_mpfr.tar.bz2 \
		libqb-0.14.4.tar.xz \
		pacemaker-1.1.11.tar.gz \
		corosync-2.3.3.tar.gz \
		nss-3.14.1.tar.gz \
		glib-2.16.6.tar.bz2 \
		libxml2-2.9.0.tar.gz \
		libxslt-1.1.28.tar.gz \
		libtool-2.4.2.tar.xz \
		bzip2-1.0.6.tar.gz \
		Python-2.7.3.tar.bz2 \
		crmsh-1.2.4.tar.bz2 \
		libaio-0.3.109.tar.bz2 \
		glue-1.0.11.tar.bz2 \
		readline-6.2.tar.gz \
		resource_agents-3.9.2.tar.gz \
		mhvtl-1.4.tar.gz \
		lzo-2.06.tar.gz \
		mhash-0.9.9.9.tar.bz2 \
		lessfs-1.7.0.tar.gz \
		tokyocabinet-1.4.48.tar.gz \
		fuse-2.9.2.tar.gz \
		db-5.3.21.tar.gz \
		snappy-1.1.0.tar.gz \
		fence_agents-3.1.12.tar.gz \
		opensm-3.3.15.tar.gz \
		pycurl-7.19.0.tar.gz \
		curl-7.29.0.tar.gz \
		Net-Telnet-3.03.tar.gz \
		python-suds-0.4.tar.gz \
		setuptools-0.6c11.tar.gz \
		pexpect-2.3.tar.gz \
		bash-4.3_025.tar.xz \
		open-fcoe-3.7.tar.bz2 \
		open-lldp-0.9.45.tar.gz \
		libconfig-1.4.9.tar.gz \
		libnl-1.1.2.tar.gz \
		libpciaccess-0.13.1.tar.bz2 \
		linux_firmware-20131226.tar.xz \
		dlm-4.0.1.tar.bz2 \
		sysklogd-1.5.tar.gz \
		ipmitool-1.8.12.tar.bz2 \
		less-451.tar.gz \
		irqbalance-1.0.5.tar.gz \
		ethtool-3.9.tar.xz \
		postgresql-9.2.4.tar.bz2 \
		psycopg2-2.5.1.tar.gz \
		mysql-5.0.96.tar.gz \
		MySQLdb-1.2.4.tar.gz \
		SQLAlchemy-0.8.1.tar.gz \
		infiniband-diags-1.5.13.tar.gz \
		libibmad-1.3.8.tar.gz \
		lockfile-0.9.1.tar.gz \
		python-daemon-1.5.5.tar.gz \
		bcache-tools-master_20130930.tar.gz \
		EnhanceIO-master_20140810.tar.gz \
		util-linux-2.23.2.tar.bz2 \
		nrpe-2.15.tar.gz \
		thin-provisioning-tools-0.2.8.tar.gz \
		expat-1.95.8.tar.gz \
		boost-1_55_0.tar.xz \
		btier-tip_c3e46b.tar.gz \
		librdmacm-1.0.15.tar.gz \
		sysstat-10.2.1.tar.gz \
		pciutils-3.2.1.tar.gz \
		tar-1.27.tar.gz \
		net-snmp-5.7.2.1.tar.gz \
		nut-2.7.1.tar.gz \
		libusb-1.0.9.tar.bz2 \
		libusb_compat-0.1.4.tar.bz2 \
		freeipmi-1.4.1.tar.gz \
		libgcrypt-1.6.1.tar.bz2 \
		libgpg-error-1.12.tar.bz2 \
		smartmontools-6.2.tar.gz \
		cryptsetup-1.6.4.tar.xz \
		popt-1.16.tar.gz \
		makedumpfile-1.5.7.tar.gz \
		elfutils-0.158.tar.bz2 \
		fio-2.0.13.tar.bz2 \
		mtx-1.3.12.tar.gz \
		mt-st-1.1.tar.gz \
		nagios-plugins-2.0.3.tar.gz \
		ceph-0.80.5.tar.gz \
		keyutils-1.5.9.tar.bz2 \
		libedit-20140620-3.1.tar.gz \
		leveldb-1.15.0.tar.gz \
		libmcrypt-2.5.8.tar.bz2 \
		nsca-2.7.2.tar.gz \
		btrfs-progs-v3.16.tar.xz \
		attr-2.4.47.tar.gz \
		acl-2.2.52.tar.gz \
		htop-1.0.3.tar.gz \
		dmidecode-2.12.tar.gz \
		xmlrpc-c-1.33.15.tar.gz \
		stunnel-5.10.tar.gz \
		sudo-1.8.12.tar.gz \
		rsync-3.1.1.tar.gz \
		win_binaries-20140704.tar.xz)
dist_files_repo	= http://download.esos-project.com/dist_files

build_targets	:= esos_kernels kernel_headers esos_tui scst scst_qla2xxx \
		busybox makedumpfile elfutils sysvinit grub glibc perl Python \
		qlogic_fw scstadmin openssh vixie-cron gcc setuptools \
		openssl zlib ncurses e2fsprogs ssmtp libibumad libibverbs \
		srptools lsscsi sg3_utils groff python-suds kexec-tools \
		iniparser cdk LVM2 xfsprogs drbd mdadm parted opensm libqb \
		pacemaker corosync nss glib libxml2 libxslt libtool bzip2 \
		crmsh libaio glue readline resource_agents mhvtl lzo mhash \
		lessfs tokyocabinet fuse db snappy fence_agents pexpect \
		pycurl curl Net-Telnet fio bash open-fcoe open-lldp \
		libconfig libnl libpciaccess linux_firmware dlm ipmitool \
		sysklogd less irqbalance ethtool postgresql psycopg2 mysql \
		MySQLdb SQLAlchemy infiniband-diags libibmad lockfile \
		python-daemon nrpe bcache-tools EnhanceIO util-linux \
		thin-provisioning-tools expat boost btier librdmacm \
		sysstat pciutils tar net-snmp nut libusb libusb_compat \
		freeipmi libgcrypt libgpg-error smartmontools cryptsetup \
		popt mtx mt-st nagios-plugins ceph keyutils libedit leveldb \
		libmcrypt nsca btrfs-progs attr acl htop dmidecode xmlrpc-c \
		stunnel sudo rsync

# Check if we should enable additional build options
ifeq ($(enable_gdb),yes)
	dist_files += $(addprefix $(DIST_FILES_DIR)/,gdb-7.7.tar.bz2)
	build_targets += gdb
endif
ifeq ($(enable_valgrind),yes)
	dist_files += $(addprefix $(DIST_FILES_DIR)/,valgrind-3.9.0.tar.bz2)
	build_targets += valgrind
endif
ifeq ($(with_ocs_sdk),yes)
	build_targets += ocs_sdk
endif
ifeq ($(with_uwire),yes)
	build_targets += uwire
endif

clean_targets		:= $(addprefix clean-,$(build_targets))
tgt_src_dir		= $(wildcard $(PKG_SRC_DIR)/$(@)-*)
linux_src		= $(wildcard $(PKG_SRC_DIR)/linux-*)
scst_src		= $(wildcard $(PKG_SRC_DIR)/scst-*)
tarball_src_dirs	= $(addprefix $(PKG_SRC_DIR)/,$(subst .tar.xz,,\
			$(subst .tar.bz2,,$(subst .tar.gz,,\
			$(notdir $(dist_files))))))
img_file		:= $(BUILD_DIR)/esos-$(esos_ver).img
bz2_img_file		:= $(img_file).bz2

# The ld scripts (eg, libc.so) are modified in-place and then
# fixed after installing
export LDFLAGS	= -L$(IMAGE_DIR)/lib -L$(IMAGE_DIR)/usr/lib \
		-Wl,-rpath-link,$(IMAGE_DIR)/lib \
		-Wl,-rpath-link,$(IMAGE_DIR)/usr/lib
export CPPFLAGS	= -idirafter $(IMAGE_DIR)/usr/include \
		-idirafter $(WORK_DIR)/kernel_headers/include

# We use a GCC spec file to override the default library search path; the
# GCC spec file is created by the 'glibc' target
spec_file	= $(WORK_DIR)/esos_build.spec
cc_base		= gcc -specs=$(spec_file) -nostdinc \
		-idirafter $(dir $(shell gcc -print-libgcc-file-name))include \
		-idirafter $(dir $(shell gcc -print-libgcc-file-name))include-fixed
esos_cc		= $(cc_base) $(CPPFLAGS)
export CC	= $(esos_cc)
cxx_base	= g++ -specs=$(spec_file) -nostdinc \
		-idirafter $(dir $(shell g++ -print-libgcc-file-name))include \
		-idirafter $(dir $(shell gcc -print-libgcc-file-name))include-fixed
esos_cxx	= $(cxx_base) $(CPPFLAGS) \
		-idirafter $(IMAGE_DIR)/usr/include/c++/4.4.5 \
		-idirafter $(IMAGE_DIR)/usr/include/c++/4.4.5/x86_64-unknown-linux-gnu
export CXX	= $(esos_cxx)

define clean_la_files
	$(FIND) $(IMAGE_DIR)/usr/lib -type f -iname $1*.la -exec $(RM) {} \;
endef


# all - The default goal; complete every target except image.
all:
	$(MAKE) -C $(BUILD_DIR) fetch
	$(MAKE) -C $(BUILD_DIR) extract
	$(MAKE) -C $(BUILD_DIR) build


# image - Create the ESOS disk image file.
.PHONY: image
image: loop_dev = $$($(CAT) $(WORK_DIR)/loop_dev)
image: $(build_targets)
	$(QUIET) if [ `whoami` != "root" ]; then \
	  $(ECHO) "### Snap! Ya gotta be root for this part..."; \
	  exit 1; \
	fi
	$(QUIET) $(ECHO) "### Creating initramfs image..."
	$(RM) $(INITRAMFS_DIR)/dev/*
	$(MKNOD) $(INITRAMFS_DIR)/dev/null c 1 3
	$(MKNOD) $(INITRAMFS_DIR)/dev/console c 5 1
	$(MKNOD) $(INITRAMFS_DIR)/dev/tty c 5 0
	$(INSTALL) $(SRC_DIR)/misc/initramfs_init $(INITRAMFS_DIR)/init
	$(LN) busybox $(INITRAMFS_DIR)/bin/sh
	cd $(INITRAMFS_DIR) && $(FIND) . -print0 | \
	$(CPIO) --null -ov --format=newc | \
	$(GZIP) > $(IMAGE_DIR)/boot/initramfs.cpio.gz
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### Setting up ESOS image file ($(img_file))..."
	# 4000 MB (not MiB)
	# 4000000000 B
	# 4000000000 B / 512 B = 7812500 sectors
	$(DD) if=/dev/zero of=$(img_file) bs=512 count=0 seek=7812500
	$(ECHO) -e "2048,204800,L,*\n206848,2048000,L\n2254848,204800,L\n\
	2459648,4096000,L\n" | $(SFDISK) --no-reread -uS -L $(img_file)
	$(LOSETUP) -f --show $(img_file) > $(WORK_DIR)/loop_dev
	$(KPARTX) -a -s $(loop_dev)
	$(SLEEP) 1
	$(MKE2FS) -L esos_boot $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p1
	$(MKE2FS) -L esos_root $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p2
	$(MKE2FS) -L esos_conf $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p3
	$(MKE2FS) -L esos_logs $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p4
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### Installing image..."
	$(MKDIR) $(MOUNT_DIR)
	$(MOUNT) $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p2 $(MOUNT_DIR) 
	$(MKDIR) $(MOUNT_DIR)/boot
	$(MOUNT) $$($(ECHO) $(loop_dev) | \
	$(SED) 's/^\/dev/\/dev\/mapper/')p1 $(MOUNT_DIR)/boot
	cd $(IMAGE_DIR) && \
	$(FIND) . -depth ! -path "./usr/include*" ! -path "*.a" \
	! -path "./usr/share/doc*" | $(CPIO) -pmdvu $(MOUNT_DIR)
	$(INSTALL) -D $(wildcard $(IMAGE_DIR)/usr/include/python*/pyconfig.h) \
	$(MOUNT_DIR)/usr/include/$(notdir \
	$(wildcard $(IMAGE_DIR)/usr/include/python*))/pyconfig.h
	cd $(SRC_DIR)/etc && $(FIND) . -depth ! -path "*/.svn*" | \
	$(CPIO) -pmdvu $(MOUNT_DIR)/etc
	pkgdatadir=$(WORK_DIR) $(WORK_DIR)/grub-install \
	--grub-setup=$(WORK_DIR)/grub-bios-setup \
	--grub-mkimage=$(WORK_DIR)/grub-mkimage \
	--grub-mkrelpath=$(WORK_DIR)/grub-mkrelpath \
	--grub-probe=$(WORK_DIR)/grub-probe \
	--root-directory=$(MOUNT_DIR) --no-floppy $(loop_dev)
	$(SED) 's/@@esos_ver@@/$(esos_ver)/' $(SRC_DIR)/misc/grub.cfg > \
	$(MOUNT_DIR)/boot/grub/grub.cfg
	$(INSTALL) $(SRC_DIR)/scripts/conf_sync.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/usb_sync.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/archive_logs.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/startup.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/health_chk.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/dev_nodes.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/scsi_id.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(SRC_DIR)/scripts/crm_mon_email.sh $(MOUNT_DIR)/usr/local/bin/
	$(INSTALL) $(SRC_DIR)/scripts/db_compact.py $(MOUNT_DIR)/usr/local/bin/
	$(MKDIR) $(MOUNT_DIR)/usr/lib/ocf/resource.d/esos
	$(INSTALL) $(SRC_DIR)/misc/ocf/* $(MOUNT_DIR)/usr/lib/ocf/resource.d/esos/
	$(MKDIR) $(MOUNT_DIR)/usr/local/perf-agent
	$(INSTALL) $(SRC_DIR)/perf-agent/* $(MOUNT_DIR)/usr/local/perf-agent/
	$(ECHO) "ESOS - Enterprise Storage OS $(esos_ver)" > \
	$(MOUNT_DIR)/etc/esos-release
	$(CHOWN) -R root:root $(MOUNT_DIR)/*
	$(FIND) $(MOUNT_DIR)/etc -type f -print0 | $(XARGS) -0 $(CHMOD) 0644
	$(FIND) $(MOUNT_DIR)/etc -type d -print0 | $(XARGS) -0 $(CHMOD) 0755
	$(FIND) $(MOUNT_DIR)/etc/rc.d -type f -print0 | \
	$(XARGS) -0 $(CHMOD) 0755
	$(CHMOD) 4750 $(MOUNT_DIR)/usr/local/bin/esos_tui
	$(CHMOD) 4755 $(MOUNT_DIR)/usr/bin/sudo
	$(CHMOD) 600 $(MOUNT_DIR)/etc/shadow
	$(CHMOD) 600 $(MOUNT_DIR)/etc/crontab
	$(CHMOD) 1777 $(MOUNT_DIR)/tmp
	$(CHMOD) 1777 $(MOUNT_DIR)/var/tmp
	$(CHMOD) 4750 $(MOUNT_DIR)/usr/bin/vtltape
	$(CHMOD) 4750 $(MOUNT_DIR)/usr/bin/vtllibrary
	$(CHOWN) 101:101 $(MOUNT_DIR)/var/lib/corosync
	$(CHOWN) -R 101:101 $(MOUNT_DIR)/var/lib/pacemaker
	$(CHOWN) -R 101:101 $(MOUNT_DIR)/var/lib/heartbeat
	$(CHOWN) 101:101 $(MOUNT_DIR)/var/run/crm
	$(CHOWN) 65534:65534 $(MOUNT_DIR)/var/run/stunnel
	$(CHOWN) 0:65534 $(MOUNT_DIR)/var/lib/stunnel
	$(CHMOD) 1770 $(MOUNT_DIR)/var/lib/stunnel
	$(FIND) $(MOUNT_DIR)/etc -path $(MOUNT_DIR)/etc/rc.d -prune -o \
	-print0 | $(XARGS) -0 $(TOUCH) -h -d "2001-01-01 00:00:00"
	$(FIND) $(MOUNT_DIR)/var/lib -print0 | \
	$(XARGS) -0 $(TOUCH) -h -d "2001-01-01 00:00:00"
	$(SED) -i 's/ $(subst /,\/,$(IMAGE_DIR))\// \//g' \
	$(MOUNT_DIR)/usr/lib/libc.so
	$(SED) -i 's/ $(subst /,\/,$(IMAGE_DIR))\// \//g' \
	$(MOUNT_DIR)/usr/lib/libpthread.so
	cd $(MOUNT_DIR)/usr/share/man && \
	$(FIND) . -type l ! -path "*.gz" -exec \
	sh -c '$(LN) `$(READLINK) $$1`.gz $$1.gz && $(RM) $$1' _ {} \;
	cd $(MOUNT_DIR)/usr/share/man && \
	$(FIND) . -type f ! -path "*.gz" -exec $(GZIP) {} \;
	$(QUIET) if [ "x$(enable_debug)" != "xyes" ]; then \
	  $(FIND) $(MOUNT_DIR)/{,usr/}{lib,bin,sbin} -type f \
	  -exec $(STRIP) --strip-debug '{}' ';'; \
	fi
	- $(DD) if=/dev/zero of=$(MOUNT_DIR)/zero_file bs=4M
	$(RM) $(MOUNT_DIR)/zero_file
	$(UMOUNT) $(MOUNT_DIR)/boot
	$(UMOUNT) $(MOUNT_DIR)
	$(KPARTX) -d $(loop_dev)
	$(LOSETUP) -d $(loop_dev)
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### Compressing image file..."
	$(BZIP2) -z -9 -c $(img_file) > $(bz2_img_file)
	cd $(dir $(bz2_img_file)) && $(MD5SUM) -b $(notdir $(bz2_img_file)) > \
	$(BUILD_DIR)/dist_md5sum.txt
	cd $(dir $(bz2_img_file)) && $(SHA256SUM) -b $(notdir $(bz2_img_file)) > \
	$(BUILD_DIR)/dist_sha256sum.txt
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### All done; your ESOS disk image file is ready!"


# pkg_dist - Create the ESOS package distribution file (tarball).
.PHONY: pkg_dist
pkg_dist: pkg_prefix = esos-$(esos_ver)
pkg_dist: $(bz2_img_file)
	$(LN) $(BUILD_DIR) $(pkg_prefix)
	$(ZIP) -9 $(pkg_prefix).zip $(pkg_prefix)/$(notdir $(bz2_img_file)) \
	$(pkg_prefix)/dist_*.txt
	$(RM) $(pkg_prefix)
	$(LN) $(SRC_DIR) $(pkg_prefix)
	$(ZIP) -9 -g $(pkg_prefix).zip $(pkg_prefix)/install_common \
	$(pkg_prefix)/install.sh $(pkg_prefix)/install.vbs \
	$(pkg_prefix)/rpm2cpio.sh \
	$(pkg_prefix)/INSTALL $(pkg_prefix)/README \
	$(pkg_prefix)/COPYING $(pkg_prefix)/ChangeLog
	$(RM) $(pkg_prefix)
	$(LN) $(wildcard $(PKG_SRC_DIR)/win_binaries-*) $(pkg_prefix)
	$(ZIP) -9 -g -r $(pkg_prefix).zip $(pkg_prefix)/*
	$(RM) $(pkg_prefix)
	$(LN) $(WORK_DIR) $(pkg_prefix)
	$(ZIP) -9 -g -r $(pkg_prefix).zip $(pkg_prefix)/vmlinux*.xz
	$(RM) $(pkg_prefix)


# clean - Remove temporary files, any image/package files, and target files.
.PHONY: clean
clean: $(clean_targets)
	$(RM) $(INITRAMFS_DIR)
	$(RM) $(IMAGE_DIR)
	$(RM) $(BUILD_DIR)/dist_*.txt
	$(RM) $(BUILD_DIR)/esos-*.zip
	$(RM) $(BUILD_DIR)/esos-*.img
	$(RM) $(BUILD_DIR)/esos-*.img.bz2

$(clean_targets):: target = $(subst clean-,,$(@))
$(clean_targets)::
	$(RM) $(target)

clean-esos_tui::
	$(MAKE) --directory=$(SRC_DIR)/tui clean


# distclean - Remove everything including build configuration settings.
.PHONY: distclean
distclean: clean
	$(RM) $(WORK_DIR)
	$(RM) $(SRC_DIR)/autom4te.cache
	$(RM) $(BUILD_DIR)/config.status
	$(RM) $(BUILD_DIR)/configure
	$(RM) $(BUILD_DIR)/config.log
	$(RM) $(BUILD_DIR)/Makefile


# fetch - Grab all required packages from distribution file repositories.
fetch: $(dist_files) ;

$(dist_files):
	$(WGET) -P $(DIST_FILES_DIR) $(dist_files_repo)/$(notdir $(@))
	$(QUIET) cd $(DIST_FILES_DIR) && \
	if ! $(GREP) $(notdir $(@)) $(SRC_DIR)/CHECKSUM.MD5 | \
	  $(MD5SUM) -c -; then \
	  $(RM) $(@); \
	  exit 1; \
	fi
	$(QUIET) cd $(DIST_FILES_DIR) && \
	if ! $(GREP) $(notdir $(@)) $(SRC_DIR)/CHECKSUM.SHA256 | \
	  $(SHA256SUM) -c -; then \
	  $(RM) $(@); \
	  exit 1; \
	fi
	$(QUIET) $(ECHO)


# extract - Extract all of the previously downloaded packages/archives.
extract: fetch $(tarball_src_dirs) ;

$(tarball_src_dirs): src_file = $(wildcard $(DIST_FILES_DIR)/$(notdir $(@)).*)
$(tarball_src_dirs):
	$(MKDIR) $(PKG_SRC_DIR)
	$(QUIET) if [ "$(suffix $(src_file))" = ".gz" ]; then \
	  $(TAR) xvfz $(src_file) -C $(PKG_SRC_DIR); \
	elif [ "$(suffix $(src_file))" = ".bz2" ]; then \
	  $(TAR) xvfj $(src_file) -C $(PKG_SRC_DIR); \
	elif [ "$(suffix $(src_file))" = ".xz" ]; then \
	  $(TAR) xvfJ $(src_file) -C $(PKG_SRC_DIR); \
	else \
	  $(ECHO) "### Unhandled file extension: $(suffix $(src_file))"; \
	  exit 1; \
	fi


# build - Configure/compile/build all of the required projects.
.PHONY: build
build: $(build_targets) ;

esos_kernels: kernel_ver = $(subst linux-,,$(notdir $(linux_src)))
esos_kernels: qla2xxx_src = $(wildcard $(PKG_SRC_DIR)/scst_qla2xxx-*)
esos_kernels: mhvtl_src = $(wildcard $(PKG_SRC_DIR)/mhvtl-*)
esos_kernels: eio_src = $(wildcard $(PKG_SRC_DIR)/EnhanceIO-*)
esos_kernels: btier_src = $(wildcard $(PKG_SRC_DIR)/btier-*)
esos_kernels: kernel_headers
	if [ ! -d $(linux_src)/put_page_callback.patch ]; \
	then \
	  $(PATCH) -F 3 -d $(linux_src) -b \
	  -B $(linux_src)/put_page_callback.patch/ -p1 < \
	  $(scst_src)/iscsi-scst/kernel/patches/put_page_callback-3.14.patch; \
	fi
	- $(PATCH) -r - -N -d $(linux_src) -p1 < \
	$(SRC_DIR)/misc/$(notdir $(linux_src)).patch
	$(QUIET) set -e; for i in $(prod_suffix) $(debug_suffix); do \
	  $(ECHO) "### Cleaning source directories..."; \
	  $(MAKE) --directory=$(linux_src) clean; \
	  $(MAKE) --directory=$(linux_src) distclean; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) clean; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) extraclean; \
	  $(MAKE) --directory=$(qla2xxx_src) KDIR=$(linux_src) clean; \
	  $(MAKE) --directory=$(mhvtl_src)/kernel KDIR=$(linux_src) clean; \
	  $(MAKE) --directory=$(mhvtl_src)/kernel KDIR=$(linux_src) distclean; \
	  $(MAKE) --directory=$(eio_src)/Driver/enhanceio \
	  KERNEL_TREE=$(linux_src) PWD=$(eio_src)/Driver/enhanceio clean; \
	  $(MAKE) --directory=$(btier_src)/kernel/btier clean; \
	  if [ "$(with_ocs_sdk)" = "yes" ]; then \
	    $(MAKE) --directory=$(linux_src) \
	    M=$(ocs_sdk_dir)/driver/linux/ocs_fc_scst clean; \
	  fi; \
	  if [ "$(with_uwire)" = "yes" ]; then \
	    $(MAKE) --directory=$(uwire_dir)/src/network clean; \
	    $(MAKE) --directory=$(uwire_dir)/src/chfcoe/src \
	    CXGB4_SRC_PATH="$(uwire_dir)/src/network/cxgb4" \
	    CSIOSTOR_SRC_PATH="$(uwire_dir)/src/network/csiostor/include" \
	    FIRMWARE_PATH="$(uwire_dir)/src/network/firmware" \
	    KDIR=$(linux_src) clean; \
	  fi; \
	  if [ "$$i" = "$(prod_suffix)" ]; then \
	    $(SED) 's/CONFIG_LOCALVERSION\=\"\"/CONFIG_LOCALVERSION\=\"$(prod_suffix)\"/' \
	    $(SRC_DIR)/misc/$(notdir $(linux_src)).config > \
	    $(linux_src)/.config; \
	    $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) 2perf; \
	    $(MAKE) --directory=$(qla2xxx_src)/drivers/scsi/qla2xxx/qla2x00-target 2perf; \
	  fi; \
	  if [ "$$i" = "$(debug_suffix)" ]; then \
	    $(SED) 's/CONFIG_LOCALVERSION\=\"\"/CONFIG_LOCALVERSION\=\"$(debug_suffix)\"/' \
	    $(SRC_DIR)/misc/$(notdir $(linux_src)).config > \
	    $(linux_src)/.config; \
	    $(PATCH) -r - -N -d $(linux_src) -p1 < \
	    $(SRC_DIR)/misc/$(notdir $(linux_src))-debug.patch; \
	    $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) 2debug; \
	    $(MAKE) --directory=$(qla2xxx_src)/drivers/scsi/qla2xxx/qla2x00-target 2debug; \
	  fi; \
	  $(ECHO) "### Building the Linux kernel..."; \
	  $(MAKE) --directory=$(linux_src); \
	  $(INSTALL) $(linux_src)/arch/x86_64/boot/bzImage \
	  $(IMAGE_DIR)/boot/bzImage$$i; \
	  $(XZ) -z -c $(linux_src)/vmlinux > $(WORK_DIR)/vmlinux$$i.xz; \
	  $(MAKE) --directory=$(linux_src) \
	  INSTALL_MOD_PATH=$(IMAGE_DIR) modules_install; \
	  $(ECHO) "### Building the SCST core and target drivers..."; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i scst; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i DESTDIR=$(IMAGE_DIR) \
	  INSTALL_DIR_H=$(IMAGE_DIR)/usr/include/scst scst_install; \
	  $(MAKE) --directory=$(scst_src)/iscsi-scst \
	  include/iscsi_scst_itf_ver.h; \
	  $(MAKE) --directory=$(scst_src)/iscsi-scst KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i mods; \
	  $(MAKE) --directory $(linux_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i SCST_INC_DIR=$(scst_src)/scst/include \
	  SUBDIRS=$(scst_src)/iscsi-scst/kernel \
	  INSTALL_MOD_PATH=$(IMAGE_DIR) modules_install; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i srpt; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i INSTALL_MOD_PATH=$(IMAGE_DIR) srpt_install; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i fcst; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i INSTALL_MOD_PATH=$(IMAGE_DIR) fcst_install; \
	  $(ECHO) "### Building the QLogic SCST target driver..."; \
	  $(MAKE) --directory=$(qla2xxx_src) SCST_DIR=$(scst_src)/scst/src \
	  SCST_INC_DIR=$(scst_src)/scst/include KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i INSTALL_MOD_PATH=$(IMAGE_DIR) all; \
	  $(ECHO) "### Building the mhVTL module..."; \
	  $(MAKE) --directory=$(mhvtl_src)/kernel KDIR=$(linux_src) \
	  KVER=$(kernel_ver)$$i; \
	  $(MKDIR) $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/kernel/drivers/scsi; \
	  $(INSTALL) -m 0644 $(mhvtl_src)/kernel/mhvtl.ko \
	  $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/kernel/drivers/scsi/; \
	  $(ECHO) "### Building the EnhanceIO driver..."; \
	  $(MAKE) --directory=$(eio_src)/Driver/enhanceio \
	  KERNEL_SOURCE_VERSION=$(kernel_ver)$$i \
	  KERNEL_TREE=$(linux_src) PWD=$(eio_src)/Driver/enhanceio; \
	  $(MKDIR) $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/extra/enhanceio; \
	  $(INSTALL) -m 0644 $(eio_src)/Driver/enhanceio/*.ko \
	  $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/extra/enhanceio/; \
	  $(ECHO) "### Building the BTIER module..."; \
	  $(MAKE) --directory=$(linux_src) KVER=$(kernel_ver)$$i \
	  M=$(btier_src)/kernel/btier modules; \
	  $(INSTALL) -D -m 0644 $(btier_src)/kernel/btier/btier.ko \
	  $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/kernel/drivers/block/btier.ko; \
	  if [ "$(with_ocs_sdk)" = "yes" ]; then \
	    $(ECHO) "### Building the Emulex OCS SCST module..."; \
	    $(CP) $(IMAGE_DIR)/usr/include/scst/Module.symvers \
	    $(ocs_sdk_dir)/driver/linux/ocs_fc_scst/; \
	    $(MAKE) --directory=$(linux_src) KVER=$(kernel_ver)$$i \
	    M=$(ocs_sdk_dir)/driver/linux/ocs_fc_scst \
	    SCST_PREFERRED=$(scst_src)/scst/include modules; \
	    $(INSTALL) -D -m 0644 \
	    $(ocs_sdk_dir)/driver/linux/ocs_fc_scst/ocs_fc_scst.ko \
	    $(IMAGE_DIR)/lib/modules/$(kernel_ver)$$i/extra/ocs_fc_scst.ko; \
	  fi; \
	  if [ "$(with_uwire)" = "yes" ]; then \
	    $(ECHO) "### Building the Chelsio Uwire SCST module..."; \
	    if [ ! -d $(uwire_dir)/cxgb4_pofcoe.patch ]; \
	    then \
	      $(PATCH) -F 3 -d $(uwire_dir)/src/network/cxgb4 -b \
	      -B $(uwire_dir)/cxgb4_pofcoe.patch/ -p1 < \
	      $(uwire_dir)/src/chfcoe/patch/cxgb4_pofcoe.patch; \
	    fi; \
	    $(MAKE) --directory=$(uwire_dir)/src/network \
	    KERNELRELEASE=$(kernel_ver)$$i DEBUG=1 KDIR=$(linux_src) \
	    disable_bonding=1 po_fcoe=1 toe; \
	    $(SED) -i 's/ln -sf $$(fixup_fwdir)\//ln -sf /g' \
	    $(uwire_dir)/src/network/firmware/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/csiostor/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/cxgb4/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/cxgb4vf/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/iw_cxgb4/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/t4_tom/Makefile; \
	    $(SED) -i 's/updates\/drivers/kernel\/drivers/' \
	    $(uwire_dir)/src/network/toecore/Makefile; \
	    $(MAKE) --directory=$(uwire_dir)/src/network \
	    KERNELRELEASE=$(kernel_ver)$$i DEBUG=1 KDIR=$(linux_src) \
	    PREFIX=$(IMAGE_DIR) fixup_fwdir=$(IMAGE_DIR)/lib/firmware/cxgb4 \
	    disable_bonding=1 po_fcoe=1 utsrelease=$(kernel_ver)$$i install; \
	    $(MAKE) --directory=$(uwire_dir)/src/chfcoe/src \
	    KERNELRELEASE=$(kernel_ver)$$i \
	    CXGB4_SRC_PATH="$(uwire_dir)/src/network/cxgb4" \
	    CSIOSTOR_SRC_PATH="$(uwire_dir)/src/network/csiostor/include" \
	    FIRMWARE_PATH="$(uwire_dir)/src/network/firmware" \
	    KDIR="$(linux_src)" SCST_INC="$(IMAGE_DIR)/usr/include/scst" \
	    target=1; \
	    $(MAKE) --directory=$(linux_src) M="$(uwire_dir)/src/chfcoe/src" \
	    INSTALL_MOD_PATH="$(IMAGE_DIR)" KVER=$(kernel_ver)$$i \
	    modules_install; \
	  fi; \
	done
	$(TOUCH) $(@)

kernel_headers:
	$(MKDIR) $(WORK_DIR)/kernel_headers
	$(MAKE) --directory=$(linux_src) \
	INSTALL_HDR_PATH="$(WORK_DIR)/kernel_headers" headers_install
	- $(PATCH) -r - -N -d $(WORK_DIR)/kernel_headers -p1 < \
	$(SRC_DIR)/misc/kernel_headers.patch
	$(TOUCH) $(@)

esos_tui: $(wildcard $(SRC_DIR)/tui/*.c) $(wildcard $(SRC_DIR)/tui/*.h)
esos_tui: glibc ncurses cdk iniparser parted util-linux curl
	$(MAKE) --directory=$(SRC_DIR)/tui CC="$(esos_cc)" \
	CFLAGS="-DBUILD_OPTS=\"\\\"$(if $(build_opts),$(build_opts),N/A)\\\"\" \
	-DESOS_VERSION=\"\\\"$(esos_ver)\\\"\" -DSVN_BRANCH=\"\\\"$(svn_branch)\\\"\""
	$(INSTALL) -m 755 $(SRC_DIR)/tui/esos_tui $(IMAGE_DIR)/usr/local/bin
	$(TOUCH) $(@)

scst: glibc esos_kernels
	$(MAKE) --directory=$(tgt_src_dir)/iscsi-scst \
	SCST_INC_DIR=$(tgt_src_dir)/scst/include progs
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/iscsi-scst/usr/iscsi-scstd \
	$(IMAGE_DIR)/usr/sbin/iscsi-scstd
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/iscsi-scst/usr/iscsi-scst-adm \
	$(IMAGE_DIR)/usr/sbin/iscsi-scst-adm
	$(INSTALL) -vD -m 644 \
	$(tgt_src_dir)/iscsi-scst/doc/manpages/iscsi-scstd.conf.5 \
	$(IMAGE_DIR)/usr/share/man/man5/iscsi-scstd.conf.5
	$(INSTALL) -vD -m 644 \
	$(tgt_src_dir)/iscsi-scst/doc/manpages/iscsi-scstd.8 \
	$(IMAGE_DIR)/usr/share/man/man8/iscsi-scstd.8
	$(INSTALL) -vD -m 644 \
	$(tgt_src_dir)/iscsi-scst/doc/manpages/iscsi-scst-adm.8 \
	$(IMAGE_DIR)/usr/share/man/man8/iscsi-scst-adm.8
	$(TOUCH) $(@)

scst_qla2xxx:
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/drivers/scsi/qla2xxx/extras/\
	qdiag.sh $(IMAGE_DIR)/usr/sbin/qdiag.sh
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/drivers/scsi/qla2xxx/extras/\
	qla_dmp.sh $(IMAGE_DIR)/usr/sbin/qla_dmp.sh
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/drivers/scsi/qla2xxx/extras/\
	qscst.sh $(IMAGE_DIR)/usr/sbin/qscst.sh
	$(TOUCH) $(@)

gdb: glibc ncurses
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-python
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libopcodes)
	$(call clean_la_files,libbfd)
	$(TOUCH) $(@)

valgrind: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

ocs_sdk: glibc
	$(MAKE) --directory=$(ocs_sdk_dir)/tools/user/elxsdkutil \
	CC="$(esos_cc)"
	$(INSTALL) -m 0755 $(ocs_sdk_dir)/tools/user/elxsdkutil/elxsdkutil \
	$(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(ocs_sdk_dir)/tools/bin/ocs_config.py \
	$(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(ocs_sdk_dir)/tools/bin/ocs_cpu_info.py \
	$(IMAGE_DIR)/usr/sbin/
	$(TOUCH) $(@)

uwire: glibc
	$(INSTALL) -m 0755 $(uwire_dir)/src/chfcoe/tools/chfcoe_perftune.sh \
	$(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(uwire_dir)/src/chfcoe/tools/chinfotool64 \
	$(IMAGE_DIR)/usr/sbin/
	$(MAKE) --directory=$(uwire_dir)/tools/cxgbtool
	$(INSTALL) -m 0755 $(uwire_dir)/tools/cxgbtool/cxgbtool \
	$(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0444 $(uwire_dir)/tools/cxgbtool/cxgbtool.8 \
	$(IMAGE_DIR)/usr/share/man/man8/
	$(TOUCH) $(@)

busybox: glibc
	$(MAKE) --directory=$(tgt_src_dir) clean
	$(MAKE) --directory=$(tgt_src_dir) distclean
	$(SED) -e 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' \
	$(SRC_DIR)/misc/$(notdir $(tgt_src_dir)).config > $(tgt_src_dir)/.config
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(INSTALL) $(tgt_src_dir)/busybox_unstripped \
	$(WORK_DIR)/initramfs/bin/busybox
	$(MAKE) --directory=$(tgt_src_dir) clean
	$(MAKE) --directory=$(tgt_src_dir) distclean
	$(CP) $(SRC_DIR)/misc/$(notdir $(tgt_src_dir)).config $(tgt_src_dir)/.config
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(INSTALL) $(tgt_src_dir)/busybox_unstripped \
	$(IMAGE_DIR)/bin/busybox
	$(INSTALL) -d $(IMAGE_DIR)/usr/share/udhcpc
	$(INSTALL) $(tgt_src_dir)/examples/udhcp/simple.script \
	$(IMAGE_DIR)/usr/share/udhcpc/default.script
	$(ECHO) -e "#! /bin/sh\n\n/bin/busybox awk \"\044\0100\"\n" > \
	$(IMAGE_DIR)/usr/bin/gawk
	$(CHMOD) +x $(IMAGE_DIR)/usr/bin/gawk
	$(TOUCH) $(@)

makedumpfile: glibc elfutils bzip2
	$(MAKE) --directory=$(tgt_src_dir)
	$(INSTALL) -m 0755 $(tgt_src_dir)/makedumpfile \
	${WORK_DIR}/initramfs/usr/sbin/makedumpfile
	$(TOUCH) $(@)

elfutils: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MKDIR) $(IMAGE_DIR)/usr/include/elfutils
	$(INSTALL) $(tgt_src_dir)/libdw/libdw.h \
	$(IMAGE_DIR)/usr/include/elfutils/libdw.h
	$(INSTALL) $(tgt_src_dir)/libdwfl/libdwfl.h \
	$(IMAGE_DIR)/usr/include/elfutils/libdwfl.h
	$(INSTALL) $(tgt_src_dir)/libdw/dwarf.h $(IMAGE_DIR)/usr/include/dwarf.h
	$(INSTALL) $(tgt_src_dir)/libelf/libelf.h $(IMAGE_DIR)/usr/include/libelf.h
	$(INSTALL) $(tgt_src_dir)/libelf/gelf.h $(IMAGE_DIR)/usr/include/gelf.h
	$(INSTALL) $(tgt_src_dir)/libelf/libelf.a $(IMAGE_DIR)/usr/lib/libelf.a
	$(INSTALL) $(tgt_src_dir)/libdw/libdw.a $(IMAGE_DIR)/usr/lib/libdw.a
	$(INSTALL) $(tgt_src_dir)/libasm/libasm.a $(IMAGE_DIR)/usr/lib/libasm.a
	$(INSTALL) $(tgt_src_dir)/libebl/libebl.a $(IMAGE_DIR)/usr/lib/libebl.a
	$(TOUCH) $(@)

sysvinit: glibc
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/$(notdir $(tgt_src_dir)).patch
	$(MAKE) --directory=$(tgt_src_dir)/src SULOGINLIBS=-lcrypt \
	CFLAGS="-O2 -fomit-frame-pointer" CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir)/src ROOT=$(IMAGE_DIR) install
	$(TOUCH) $(@)

grub: glibc LVM2
	cd $(tgt_src_dir) && ./configure --prefix=/usr --disable-grub-mkfont \
	--enable-device-mapper --disable-werror
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/grub-core \
	DESTDIR=$(IMAGE_DIR) install-platformDATA
	$(SED) 's/^prefix=.*/prefix=$(subst /,\/,$(IMAGE_DIR)/usr)/' \
	$(IMAGE_DIR)/usr/sbin/grub-install > $(WORK_DIR)/grub-install
	$(CHMOD) +x $(WORK_DIR)/grub-install
	$(SED) 's/^prefix=.*/prefix=$(subst /,\/,$(IMAGE_DIR)/usr)/' \
	$(tgt_src_dir)/grub-mkconfig_lib > $(WORK_DIR)/grub-mkconfig_lib
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 \
	--library-path \"$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" \
	$(IMAGE_DIR)/usr/sbin/grub-bios-setup \"\044\0100\"\n" > \
	$(WORK_DIR)/grub-bios-setup
	$(CHMOD) +x $(WORK_DIR)/grub-bios-setup
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 \
	--library-path \"$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" \
	$(IMAGE_DIR)/usr/bin/grub-mkimage \"\044\0100\"\n" > \
	$(WORK_DIR)/grub-mkimage
	$(CHMOD) +x $(WORK_DIR)/grub-mkimage
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 \
	--library-path \"$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" \
	$(IMAGE_DIR)/usr/bin/grub-mkrelpath \"\044\0100\"\n" > \
	$(WORK_DIR)/grub-mkrelpath
	$(CHMOD) +x $(WORK_DIR)/grub-mkrelpath
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 \
	--library-path \"$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" \
	$(IMAGE_DIR)/usr/sbin/grub-probe \"\044\0100\"\n" > \
	$(WORK_DIR)/grub-probe
	$(CHMOD) +x $(WORK_DIR)/grub-probe
	$(TOUCH) $(@)

glibc: kernel_headers
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/glibc-2.12.2.patch
	$(TOUCH) $(IMAGE_DIR)/etc/ld.so.conf
	$(MKDIR) $(WORK_DIR)/glibc-build
	cd $(WORK_DIR)/glibc-build BASH_SHELL="/bin/bash" && \
	CC="" CXX="" CFLAGS="-O2 -U_FORTIFY_SOURCE -fno-stack-protector" \
	LDFLAGS="" $(tgt_src_dir)/configure --prefix=/usr --without-selinux
	$(MAKE) --directory=$(WORK_DIR)/glibc-build LDFLAGS=""
	$(MAKE) --directory=$(WORK_DIR)/glibc-build \
	install_root=$(IMAGE_DIR) install
	$(SED) -i 's/ \// $(subst /,\/,$(IMAGE_DIR))\//g' \
	$(IMAGE_DIR)/usr/lib/libc.so
	$(SED) -i 's/ \// $(subst /,\/,$(IMAGE_DIR))\//g' \
	$(IMAGE_DIR)/usr/lib/libpthread.so
	$(RM) $(IMAGE_DIR)/etc/localtime
	$(ECHO) -en "*link_libgcc:\n-L$(IMAGE_DIR)/lib \
	-L$(IMAGE_DIR)/usr/lib -L$(dir $(shell gcc -print-libgcc-file-name)) \
	-rpath-link $(IMAGE_DIR)/lib -rpath-link $(IMAGE_DIR)/usr/lib\n" > \
	$(spec_file)
	$(TOUCH) $(@)

perl: glibc
	cd $(tgt_src_dir) && ./configure.gnu --prefix=/usr --verbose \
	-Dusrinc=$(IMAGE_DIR)/usr/include -Dincpth=$(IMAGE_DIR)/usr/include \
	-Dlocincpth=$(IMAGE_DIR)/usr/include \
	-Dlibpth="$(IMAGE_DIR)/lib $(IMAGE_DIR)/usr/lib" \
	-Dloclibpth="$(IMAGE_DIR)/lib $(IMAGE_DIR)/usr/lib"
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) install.perl \
	DESTDIR=$(IMAGE_DIR) INSTALLFLAGS="-f -o"
	$(TOUCH) $(@)

Python: glibc gcc bzip2 readline openssl
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/Python-2.7.3.patch
	cd $(tgt_src_dir) && LDFLAGS="$(LDFLAGS)" \
	CPPFLAGS="-I$(IMAGE_DIR)/usr/include \
	-I$(WORK_DIR)/kernel_headers/include" \
	./configure --prefix=/usr --enable-shared
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)" CXX="$(cxx_base)"
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)" CXX="$(cxx_base)" \
	DESTDIR=$(IMAGE_DIR) install
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 \
	--library-path \"$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" \
	$(IMAGE_DIR)/usr/bin/python \"\044\0100\"\n" > $(WORK_DIR)/python
	$(CHMOD) +x $(WORK_DIR)/python
	$(TOUCH) $(@)

qlogic_fw:
	$(CP) $(tgt_src_dir)/*.bin $(IMAGE_DIR)/lib/firmware/
	$(CP) $(tgt_src_dir)/LICENSE $(IMAGE_DIR)/lib/firmware/QLOGIC_FW_LICENSE
	$(TOUCH) $(@)

scstadmin: perl_mod = $(wildcard $(scst_src)/scstadmin/scstadmin/scst-*)
scstadmin: perl_lib = $(wildcard $(IMAGE_DIR)/usr/lib/perl5/5.*)
scstadmin: perl
	cd $(perl_mod) && PERL5LIB="$(perl_lib)" \
	$(IMAGE_DIR)/usr/bin/perl Makefile.PL \
	PREFIX=/usr DESTDIR=$(IMAGE_DIR) PERL_LIB="$(perl_lib)" \
	PERL_ARCHLIB="$(perl_lib)/x86_64-linux"
	$(MAKE) --directory=$(perl_mod) PERL5LIB="$(perl_lib)"
	$(MAKE) --directory=$(perl_mod) PERL5LIB="$(perl_lib)" install
	$(INSTALL) -m 755 $(scst_src)/scstadmin/scstadmin/scstadmin \
	$(IMAGE_DIR)/usr/sbin/
	$(TOUCH) $(@)

openssh: glibc zlib openssl
	cd $(tgt_src_dir) && LD_LIBRARY_PATH=/lib64:/lib/x86_64-linux-gnu:\
	/usr/lib64:/usr/lib/x86_64-linux-gnu:$(IMAGE_DIR)/lib:\
	$(IMAGE_DIR)/usr/lib ./configure --prefix="" --exec-prefix=/usr \
	--without-openssl-header-check --sysconfdir=/etc/ssh
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-files
	$(INSTALL) -D -m 644 $(tgt_src_dir)/moduli.out $(IMAGE_DIR)/etc/ssh/moduli
	$(TOUCH) $(@)

vixie-cron: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" all
	$(INSTALL) -m 111 $(tgt_src_dir)/cron $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 4111 $(tgt_src_dir)/crontab $(IMAGE_DIR)/usr/bin/
	$(TOUCH) $(@)

gcc: glibc
	$(MKDIR) $(WORK_DIR)/gcc-build
	cd $(WORK_DIR)/gcc-build && $(tgt_src_dir)/configure --prefix=/usr \
	--disable-multilib --disable-nls --disable-bootstrap \
	--enable-languages=c,c++
	$(MAKE) --directory=$(WORK_DIR)/gcc-build all-target-libgcc \
	LDFLAGS_FOR_TARGET="$(LDFLAGS)" CPPFLAGS_FOR_TARGET="$(CPPFLAGS)" \
	CFLAGS_FOR_TARGET="-B$(IMAGE_DIR)/usr/lib -g -O2 $(LDFLAGS) $(CPPFLAGS)"
	$(MAKE) --directory=$(WORK_DIR)/gcc-build DESTDIR=$(IMAGE_DIR) \
	install-target-libgcc
	$(MAKE) --directory=$(WORK_DIR)/gcc-build all-target-libstdc++-v3 \
	LDFLAGS_FOR_TARGET="$(LDFLAGS)" CPPFLAGS_FOR_TARGET="$(CPPFLAGS)" \
	CFLAGS_FOR_TARGET="-B$(IMAGE_DIR)/usr/lib -g -O2 $(LDFLAGS) $(CPPFLAGS)"
	$(MAKE) --directory=$(WORK_DIR)/gcc-build DESTDIR=$(IMAGE_DIR) \
	install-target-libstdc++-v3
	$(call clean_la_files,libsupc)
	$(call clean_la_files,libstdc)
	$(TOUCH) $(@)

setuptools: Python
	cd $(tgt_src_dir) && $(WORK_DIR)/python ./setup.py install \
	--prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

openssl: glibc gcc
	cd $(tgt_src_dir) && ./config shared \
	--prefix=/usr --openssldir=/etc/ssl \
	-I$(IMAGE_DIR)/usr/include -I$(WORK_DIR)/kernel_headers/include \
	$(LDFLAGS)
	$(SED) -i '/LD_LIBRARY_PATH/d' $(tgt_src_dir)/Makefile.shared
	$(MAKE) --jobs=1 --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) INSTALL_PREFIX=$(IMAGE_DIR) install_sw
	$(TOUCH) $(@)

zlib: glibc
	cd $(tgt_src_dir) && CFLAGS="$(CPPFLAGS)" ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

ncurses: glibc gcc
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < $(SRC_DIR)/misc/ncurses-5.7.patch
	cd $(tgt_src_dir) && ./configure --prefix=/usr --with-shared \
	--without-gpm --mandir=/usr/share/man --with-termlib
	$(MAKE) --directory=$(tgt_src_dir) CXXLIBS="-lstdc++"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

e2fsprogs: glibc util-linux
	$(MKDIR) $(WORK_DIR)/e2fsprogs-build
	cd $(WORK_DIR)/e2fsprogs-build && LIBS="-lpthread" \
	$(tgt_src_dir)/configure --prefix=/usr --enable-elf-shlibs \
	--sysconfdir=/etc --enable-verbose-makecmds --disable-libuuid \
	--disable-libblkid --disable-uuidd --enable-symlink-install \
	--enable-symlink-build
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build \
	CC="$(esos_cc)" LD="$(cc_base)" LIBUUID="-luuid" LIBBLKID="-lblkid"
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build \
	DESTDIR=$(IMAGE_DIR) install-libs
	$(TOUCH) $(@)

ssmtp: glibc openssl
	cd $(tgt_src_dir) && CFLAGS="$(CPPFLAGS) $(LDFLAGS) -lcrypto" \
	./configure --enable-ssl --prefix="" --exec-prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(INSTALL) -m 755 $(tgt_src_dir)/ssmtp $(IMAGE_DIR)/usr/sbin/
	$(LN) ssmtp $(IMAGE_DIR)/usr/sbin/sendmail
	$(TOUCH) $(@)

libibumad: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libibumad)
	$(TOUCH) $(@)

libibverbs: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libibverbs)
	$(TOUCH) $(@)

srptools: glibc libibumad libibverbs
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-exec-am
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-man
	$(TOUCH) $(@)

lsscsi: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

sg3_utils: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libsgutils2)
	$(TOUCH) $(@)

groff: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)" \
	CCC="$(cxx_base) -I$(wildcard $(IMAGE_DIR)/usr/include/c++/*) \
	-I$(wildcard $(IMAGE_DIR)/usr/include/c++/*/x86_64-unknown-linux-gnu)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(LN) tbl $(IMAGE_DIR)/usr/bin/gtbl
	$(TOUCH) $(@)

python-suds: Python setuptools
	cd $(tgt_src_dir) && \
	LD_LIBRARY_PATH="/lib:/usr/lib:/lib64:/usr/lib64:\
	/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:\
	$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib" \
	$(WORK_DIR)/python ./setup.py install --prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

kexec-tools: glibc
	cd $(tgt_src_dir) && LDFLAGS="$(LDFLAGS) --static" \
	CFLAGS="-DEM_486=6 -DEM_386=3" ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) \
	CC="$(cc_base) -idirafter $(IMAGE_DIR)/usr/include \
	-idirafter $(WORK_DIR)/kernel_headers/include"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

iniparser: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" CFLAGS="-O2 -fPIC -Wall"
	$(INSTALL) -m 0644 $(tgt_src_dir)/libiniparser.a $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 0755 $(tgt_src_dir)/libiniparser.so.0 $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 0644 $(tgt_src_dir)/src/iniparser.h $(IMAGE_DIR)/usr/include/
	$(INSTALL) -m 0644 $(tgt_src_dir)/src/dictionary.h $(IMAGE_DIR)/usr/include/
	$(TOUCH) $(@)

cdk: glibc ncurses
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/cdk-5.0-20120323.patch
	cd $(tgt_src_dir) && \
	NCURSES_CONFIG="$(IMAGE_DIR)/usr/bin/ncurses5-config \
	--prefix=$(IMAGE_DIR)/usr --exec-prefix=$(IMAGE_DIR)/usr" \
	./configure --prefix=/usr --with-ncurses --with-libtool \
	--mandir=/usr/share/man
	$(MAKE) --directory=$(tgt_src_dir) LIBS="-lncurses"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libcdk)
	$(TOUCH) $(@)

LVM2: glibc corosync dlm thin-provisioning-tools
	cd $(tgt_src_dir) && COROSYNC_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
	COROSYNC_LIBS="$(LDFLAGS)" \
	QUORUM_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
        QUORUM_LIBS="$(LDFLAGS) -lquorum -lrt" \
	CPG_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
        CPG_LIBS="$(LDFLAGS) -lcpg -lrt -lpthread" \
	CMAP_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
        CMAP_LIBS="$(LDFLAGS) -lcmap" DLM_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
        DLM_LIBS="$(LDFLAGS) -ldlm -lpthread" \
	./configure --with-lvm1=none --disable-selinux --prefix=/usr \
	--with-clvmd=corosync --with-cluster=internal --enable-ocf \
	--enable-cmirrord --disable-readline --with-thin=internal \
	--with-thin-check=$(IMAGE_DIR)/usr/sbin/thin_check \
	--with-cache=internal
	$(MAKE) --directory=$(tgt_src_dir) CLDFLAGS+="$(LDFLAGS)"
	$(MAKE) --directory=$(tgt_src_dir)/man DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libdm DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/scripts DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/daemons DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

xfsprogs: glibc util-linux
	cd $(tgt_src_dir) && CFLAGS="-DNO_ENDIAN_DEP_TYPES $(CPPFLAGS)" \
	./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) BUILD_VERBOSE=1
	$(MAKE) --directory=$(tgt_src_dir) DIST_ROOT=$(IMAGE_DIR) install
	$(TOUCH) $(@)

drbd: glibc
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/$(notdir $(tgt_src_dir)).patch
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-km \
	--without-udev --without-xen --with-pacemaker --without-heartbeat \
	--without-rgmanager --without-bashcompletion --with-distro=generic \
	--sysconfdir=/etc --localstatedir=/var --with-utils
	$(MAKE) --directory=$(tgt_src_dir) tools doc
	$(MAKE) --directory=$(tgt_src_dir)/user DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/documentation DESTDIR=$(IMAGE_DIR) \
	install
	$(MAKE) --directory=$(tgt_src_dir)/scripts DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

mdadm: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" \
	MAP_DIR="/var/run/mdadm" RUN_DIR="/var/run/mdadm" \
	CWFLAGS="-Wall -Wstrict-prototypes -Wextra -Wno-unused-parameter"
	$(INSTALL) -D -m 755 $(tgt_src_dir)/mdadm $(IMAGE_DIR)/sbin/mdadm
	$(INSTALL) -D -m 755 $(tgt_src_dir)/mdmon $(IMAGE_DIR)/sbin/mdmon
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-man
	$(TOUCH) $(@)

parted: glibc util-linux LVM2
	cd $(tgt_src_dir) && CFLAGS="-D_BLKID_TYPES_H" ./configure --prefix=/usr \
	--without-readline
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libparted)
	$(TOUCH) $(@)

opensm: glibc gcc libibumad libibverbs
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-data
	$(MAKE) --directory=$(tgt_src_dir)/opensm DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/osmtest DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/complib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libvendor DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libopensm)
	$(call clean_la_files,libosmvendor)
	$(call clean_la_files,libosmcomp)
	$(TOUCH) $(@)

libqb: glibc glib
	cd $(tgt_src_dir) && \
	GLIB_CFLAGS="-I$(IMAGE_DIR)/usr/include/glib-2.0 \
	-I$(IMAGE_DIR)/usr/lib/glib-2.0/include" \
	GLIB_LIBS="-L$(IMAGE_DIR)/usr/lib -lglib-2.0" ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libqb)
	$(TOUCH) $(@)

pacemaker: glibc libqb util-linux glib libxml2 libtool ncurses bzip2 \
	corosync libxslt glue Python
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  $(SED) -i 's/HAVE_dbus\=1/HAVE_dbus\=0/' $(tgt_src_dir)/configure.ac; \
	  $(SED) -i 's/^DBUS_LIBS.*/DBUS_LIBS\=\"\$$CFLAGS\"/' $(tgt_src_dir)/configure.ac; \
	  $(SED) -i 's/ -I\$${prefix}\/include\/heartbeat//' $(tgt_src_dir)/configure.ac; \
	  $(SED) -i 's/ -I\$${prefix}\/include//g' $(tgt_src_dir)/configure.ac; \
	  cd $(tgt_src_dir) && ./autogen.sh; \
	fi
	cd $(tgt_src_dir) && \
	PKG_CONFIG="pkg-config --define-variable=prefix=$(IMAGE_DIR)/usr" \
	PKG_CONFIG_PATH="$(IMAGE_DIR)/usr/lib/pkgconfig" \
	XML2CONFIG="$(IMAGE_DIR)/usr/bin/xml2-config \
	--prefix=$(IMAGE_DIR)/usr" \
	cpg_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
	cpg_LIBS="$(LDFLAGS) -lcpg" \
	cfg_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
	cfg_LIBS="$(LDFLAGS) -lcfg" \
	libqb_CFLAGS="-I$(IMAGE_DIR)/usr/include/qb" \
	libqb_LIBS="$(LDFLAGS) -lqb" \
	cmap_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
	cmap_LIBS="$(LDFLAGS) -lcmap" \
	quorum_CFLAGS="-I$(IMAGE_DIR)/usr/include/corosync" \
	quorum_LIBS="$(LDFLAGS) -lquorum" PYTHON="$(WORK_DIR)/python" \
	ac_cv_path_PKGCONFIG="pkg-config \
	--define-variable=prefix=$(IMAGE_DIR)/usr" \
	CPPFLAGS="$(CPPFLAGS)" LDFLAGS="$(LDFLAGS)" LIBS="-ltinfo" \
	./configure --prefix=/usr --disable-upstart --disable-systemd \
	--without-heartbeat --without-snmp --without-esmtp \
	--disable-fatal-warnings --disable-ansi --disable-silent-rules \
	--sysconfdir=/etc --localstatedir=/var --with-python
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" CCLD="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir)/replace DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/mcp DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/pengine DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/cib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/crmd DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/fencing DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lrmd DESTDIR=$(IMAGE_DIR) \
	init_SCRIPTS="" install
	$(MAKE) --directory=$(tgt_src_dir)/attrd DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/xml DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/cts DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/doc DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/extra DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libpe)
	$(call clean_la_files,libcrm)
	$(call clean_la_files,liblrmd)
	$(call clean_la_files,libcib)
	$(call clean_la_files,libtransitioner)
	$(call clean_la_files,libstonithd)
	$(TOUCH) $(@)

corosync: glibc libqb nss librdmacm libibverbs
	cd $(tgt_src_dir) && nss_CFLAGS="$(CPPFLAGS) \
	-I$(IMAGE_DIR)/usr/include/nss" \
	nss_LIBS="$(LDFLAGS) -lnss3" LIBQB_CFLAGS="$(CPPFLAGS) \
	-I$(IMAGE_DIR)/usr/include/qb" \
	LIBQB_LIBS="$(LDFLAGS) -lqb" rdmacm_CFLAGS="$(CPPFLAGS) \
	-I$(IMAGE_DIR)/usr/include/rdma" \
	rdmacm_LIBS="$(LDFLAGS) -lrdmacm" ibverbs_CFLAGS="$(CPPFLAGS) \
	-I$(IMAGE_DIR)/usr/include/infiniband" \
	ibverbs_LIBS="$(LDFLAGS) -libverbs" ./configure --prefix=/usr \
	--sysconfdir=/etc --localstatedir=/var --enable-xmlconf --enable-rdma
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/common_lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/exec DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/test DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/cts DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/pkgconfig DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/man DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/qdevices DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/conf DESTDIR=$(IMAGE_DIR) \
	install-corosysxmlxsltDATA
	$(call clean_la_files,libtotem_pg)
	$(call clean_la_files,libcfg)
	$(call clean_la_files,libsam)
	$(call clean_la_files,libvotequorum)
	$(call clean_la_files,libquorum)
	$(call clean_la_files,libcpg)
	$(call clean_la_files,libcmap)
	$(call clean_la_files,libcorosync_common)
	$(TOUCH) $(@)

nss: glibc zlib
	$(MAKE) --jobs=1 --directory=$(tgt_src_dir)/mozilla/security/nss \
	BUILD_OPT=1 USE_64=1 USE_SYSTEM_ZLIB=1 \
	ZLIB_LIBS="-lz" OS_LIBS="-lpthread -ldl -lc -lrt -lz" \
	CC="$(cc_base) -I$(tgt_src_dir)/mozilla/security/nss/lib/zlib \
	-I$(tgt_src_dir)/mozilla/security/nss/lib/nss $(CPPFLAGS)" \
	DSO_CFLAGS="-fPIC -std=gnu99" nss_build_all
	$(INSTALL) -v -m755 $(tgt_src_dir)/mozilla/dist/Linux*/lib/*.so \
	$(IMAGE_DIR)/usr/lib
	$(INSTALL) -v -m644 \
	$(tgt_src_dir)/mozilla/dist/Linux*/lib/{*.chk,libcrmf.a} \
	$(IMAGE_DIR)/usr/lib
	$(INSTALL) -v -m755 -d $(IMAGE_DIR)/usr/include/nss
	$(CP) -v -RL $(tgt_src_dir)/mozilla/dist/{public,private}/nss/* \
	$(IMAGE_DIR)/usr/include/nss
	$(CP) -v -RL $(tgt_src_dir)/mozilla/dist/Linux*/include/* \
	$(IMAGE_DIR)/usr/include/nss
	$(CHMOD) 644 $(IMAGE_DIR)/usr/include/nss/*.h
	$(INSTALL) -v -m755 \
	$(tgt_src_dir)/mozilla/dist/Linux*/bin/{certutil,pk12util} \
	$(IMAGE_DIR)/usr/bin
	$(TOUCH) $(@)

glib: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libg)
	$(TOUCH) $(@)

libxml2: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-python
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libxml2)
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/usr/bin/xml2-config \
	--prefix=$(IMAGE_DIR)/usr \"\044\0100\"\n" > $(WORK_DIR)/xml2-config
	$(CHMOD) +x $(WORK_DIR)/xml2-config
	$(TOUCH) $(@)

libxslt: glibc libxml2
	cd $(tgt_src_dir) && \
	./configure --prefix=/usr --with-libxml-prefix="$(IMAGE_DIR)/usr" \
	--with-libxml-include-prefix="$(IMAGE_DIR)/usr/include/libxml2" \
	--with-libxml-libs-prefix="$(IMAGE_DIR)/usr/lib" --without-python \
	--without-crypto
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libxslt)
	$(call clean_la_files,libexslt)
	$(TOUCH) $(@)

libtool: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libltdl)
	$(TOUCH) $(@)

bzip2: glibc
	$(MAKE) --file=$(tgt_src_dir)/Makefile \
	--directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(INSTALL) -v $(tgt_src_dir)/libbz2.a $(IMAGE_DIR)/usr/lib
	$(MAKE) --directory=$(tgt_src_dir) clean
	$(MAKE) --file=$(tgt_src_dir)/Makefile-libbz2_so \
	--directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(INSTALL) -v $(tgt_src_dir)/libbz2.so.1.0.6 $(IMAGE_DIR)/usr/lib
	$(LN) libbz2.so.1.0.6 $(IMAGE_DIR)/usr/lib/libbz2.so.1.0
	$(LN) libbz2.so.1.0.6 $(IMAGE_DIR)/usr/lib/libbz2.so
	$(INSTALL) -v -m644 $(tgt_src_dir)/bzlib.h $(IMAGE_DIR)/usr/include
	$(TOUCH) $(@)

crmsh: glibc Python glue pacemaker
	cd $(tgt_src_dir) && \
	CFLAGS="-I$(IMAGE_DIR)/usr/include/pacemaker \
	-I$(IMAGE_DIR)/usr/include/heartbeat $(CPPFLAGS)" \
	PYTHON="$(WORK_DIR)/python" \
	PKG_CONFIG_PATH="$(IMAGE_DIR)/usr/lib/pkgconfig" \
	./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

libaio: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) prefix=$(IMAGE_DIR)/usr install
	$(TOUCH) $(@)

glue: glibc libaio libxml2 bzip2 curl util-linux
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  cd $(tgt_src_dir) && ./autogen.sh; \
	fi
	cd $(tgt_src_dir) && \
	PKG_CONFIG="pkg-config --define-variable=prefix=$(IMAGE_DIR)/usr" \
	PKG_CONFIG_PATH="$(IMAGE_DIR)/usr/lib/pkgconfig" \
	XML2CONFIG="$(IMAGE_DIR)/usr/bin/xml2-config \
	--prefix=$(IMAGE_DIR)/usr" \
	ac_cv_path_PKGCONFIG="pkg-config \
	--define-variable=prefix=$(IMAGE_DIR)/usr" \
	LIBS="-lz -lm -ldl -lxml2" ./configure --prefix=/usr \
	--disable-ansi --disable-fatal-warnings \
	--sysconfdir=/etc --localstatedir=/var --disable-doc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/replace DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lrm DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/logd DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/hb_report DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/config DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libplumb)
	$(call clean_la_files,libstonith)
	$(call clean_la_files,libpils)
	$(call clean_la_files,liblrm)
	$(FIND) $(IMAGE_DIR)/usr/lib/stonith/plugins/stonith2 \
	-type f -iname *.la -exec $(RM) {} \;
	$(FIND) $(IMAGE_DIR)/usr/lib/heartbeat/plugins \
	-type f -iname *.la -exec $(RM) {} \;
	$(TOUCH) $(@)

readline: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) SHOBJ_CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

resource_agents: glib glue
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  cd $(tgt_src_dir) && ./autogen.sh; \
	fi
	cd $(tgt_src_dir) && \
	PKG_CONFIG="pkg-config --define-variable=prefix=$(IMAGE_DIR)/usr" \
	PKG_CONFIG_PATH="$(IMAGE_DIR)/usr/lib/pkgconfig" \
	ac_cv_path_PKGCONFIG="pkg-config --define-variable=prefix=\
	$(IMAGE_DIR)/usr" CFLAGS="$(CPPFLAGS)" \
	./configure --prefix=/usr --disable-ansi --disable-fatal-warnings \
	--sysconfdir=/etc --localstatedir=/var
	$(MAKE) --directory=$(tgt_src_dir)/rgmanager
	$(MAKE) --directory=$(tgt_src_dir)/include
	$(MAKE) --directory=$(tgt_src_dir)/heartbeat
	$(MAKE) --directory=$(tgt_src_dir)/tools
	$(MAKE) --directory=$(tgt_src_dir)/rgmanager DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/heartbeat DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(LN) /usr/lib/ocf/lib/heartbeat/ocf-shellfuncs \
	$(IMAGE_DIR)/usr/lib/ocf/resource.d/heartbeat/.ocf-shellfuncs
	$(TOUCH) $(@)

mhvtl: glibc lzo zlib
	$(MAKE) --directory=$(tgt_src_dir) MHVTL_HOME_PATH="/mnt/mhvtl" \
	CC="$(esos_cc)"
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/libvtlscsi.so $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/libvtlcart.so $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/vtltape $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/vtllibrary $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/vtlcmd $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/mktape $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/dump_tape $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/edit_tape $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 755 $(tgt_src_dir)/usr/tapeexerciser $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 700 $(tgt_src_dir)/usr/build_library_config \
	$(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 700 $(tgt_src_dir)/usr/make_vtl_media $(IMAGE_DIR)/usr/bin/
	$(TOUCH) $(@)

lzo: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --enable-shared
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,liblzo2)
	$(TOUCH) $(@)

mhash: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libmhash)
	$(TOUCH) $(@)

lessfs: glibc mhash openssl lzo fuse db tokyocabinet snappy
	cd $(tgt_src_dir) && DEPS_CFLAGS="$(CPPFLAGS)" \
	DEPS_LIBS="$(LDFLAGS) -ltokyocabinet -lfuse -lbz2 -lssl \
	-lcrypto -lpthread" \
        ./configure --prefix=/usr \
	--with-crypto --with-lzo --with-snappy \
	--without-hamsterdb --with-berkeleydb
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

tokyocabinet: glibc bzip2
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

fuse: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr \
	--sysconfdir=/etc --localstatedir=/var
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/doc DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/util DESTDIR=$(IMAGE_DIR) \
	install-binPROGRAMS
	$(INSTALL) $(tgt_src_dir)/util/mount.fuse $(IMAGE_DIR)/sbin/mount.fuse
	$(call clean_la_files,libfuse)
	$(call clean_la_files,libulockmgr)
	$(TOUCH) $(@)

db: glibc
	cd $(tgt_src_dir)/build_unix && CC="$(esos_cc)" \
	../dist/configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)/build_unix
	$(MAKE) --directory=$(tgt_src_dir)/build_unix \
	DESTDIR=$(IMAGE_DIR) install_setup
	$(MAKE) --directory=$(tgt_src_dir)/build_unix \
	DESTDIR=$(IMAGE_DIR) install_include
	$(MAKE) --directory=$(tgt_src_dir)/build_unix \
	DESTDIR=$(IMAGE_DIR) install_lib
	$(MAKE) --directory=$(tgt_src_dir)/build_unix \
	DESTDIR=$(IMAGE_DIR) install_utilities
	$(call clean_la_files,libdb)
	$(TOUCH) $(@)

snappy: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libsnappy)
	$(TOUCH) $(@)

fence_agents: glibc nss Python pexpect pycurl python-suds Net-Telnet
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  $(SED) -i 's/\/log\/cluster/\/log/' $(tgt_src_dir)/configure.ac; \
	  cd $(tgt_src_dir) && ./autogen.sh; \
	fi
	cd $(tgt_src_dir) && \
	nss_CFLAGS="$(CPPFLAGS) -I$(IMAGE_DIR)/usr/include/nss" \
	nss_LIBS="$(LDFLAGS) -lnss3 -lssl3 -lnssutil3" \
	nspr_CFLAGS="$(CPPFLAGS) -I$(IMAGE_DIR)/usr/include/nss" \
	nspr_LIBS="$(LDFLAGS) -lnspr4" \
	./configure --prefix=/usr --localstatedir=/var --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir) PATH="$(WORK_DIR):$$PATH" \
	PERL5LIB="$(wildcard $(IMAGE_DIR)/usr/lib/perl5/site_perl/5.*)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

pexpect: Python
	cd $(tgt_src_dir) && $(WORK_DIR)/python ./setup.py install \
	--prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

pycurl: Python curl
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/pycurl-7.19.0.patch
	cd $(tgt_src_dir) && CC="$(esos_cc)" $(WORK_DIR)/python \
	./setup.py install --prefix=$(IMAGE_DIR)/usr \
	--curl-config=$(IMAGE_DIR)/usr/bin/curl-config
	$(TOUCH) $(@)

curl: glibc
	cd $(tgt_src_dir) && LD_LIBRARY_PATH=$(IMAGE_DIR)/usr/lib: \
	./configure --prefix=/usr \
	--disable-static --without-libssh2 --without-libidn
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libcurl)
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/usr/bin/curl-config \
	\"\044\0100\"\n" > $(WORK_DIR)/curl-config
	$(CHMOD) +x $(WORK_DIR)/curl-config
	$(TOUCH) $(@)

Net-Telnet: perl_lib = $(wildcard $(IMAGE_DIR)/usr/lib/perl5/5.*)
Net-Telnet: perl
	cd $(tgt_src_dir) && PERL5LIB="$(perl_lib)" \
	$(IMAGE_DIR)/usr/bin/perl Makefile.PL \
	PREFIX=/usr DESTDIR=$(IMAGE_DIR) PERL_LIB="$(perl_lib)" \
	PERL_ARCHLIB="$(perl_lib)/x86_64-linux"
	$(MAKE) --directory=$(tgt_src_dir) PERL5LIB="$(perl_lib)"
	$(MAKE) --directory=$(tgt_src_dir) PERL5LIB="$(perl_lib)" install
	$(TOUCH) $(@)

fio: glibc libaio
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) prefix=/usr \
	mandir=/usr/share/man DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

bash: glibc ncurses
	cd $(tgt_src_dir) && ./configure --prefix=/usr \
	--exec-prefix=/ --with-curses
	$(MAKE) --directory=$(tgt_src_dir) TERMCAP_LIB="-ltinfo"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

open-fcoe: glibc open-lldp libpciaccess
	$(QUIET) if [ ! -f "$(tgt_src_dir)/libHBAAPI/configure" ]; then \
	  $(SED) -i 's/-Werror//' $(tgt_src_dir)/libHBAAPI/configure.ac; \
	  cd $(tgt_src_dir)/libHBAAPI && ./bootstrap.sh; \
	fi
	cd $(tgt_src_dir)/libHBAAPI && ./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)/libHBAAPI
	$(MAKE) --directory=$(tgt_src_dir)/libHBAAPI DESTDIR=$(IMAGE_DIR) \
	install-libLTLIBRARIES
	$(MAKE) --directory=$(tgt_src_dir)/libHBAAPI DESTDIR=$(IMAGE_DIR) \
	install-data
	$(QUIET) if [ ! -f "$(tgt_src_dir)/libhbalinux/configure" ]; then \
	  $(SED) -i 's/-Werror//' $(tgt_src_dir)/libhbalinux/configure.ac; \
	  cd $(tgt_src_dir)/libhbalinux && ./bootstrap.sh; \
	fi
	cd $(tgt_src_dir)/libhbalinux && \
	PCIACCESS_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
	PCIACCESS_LIBS="$(LDFLAGS) -lpciaccess" \
	HBAAPI_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
	HBAAPI_LIBS="$(LDFLAGS) -lHBAAPI -ldl" ./configure --prefix=/usr \
	--sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)/libhbalinux
	$(MAKE) --directory=$(tgt_src_dir)/libhbalinux DESTDIR=$(IMAGE_DIR) install
	$(QUIET) if [ ! -f "$(tgt_src_dir)/fcoe-utils/configure" ]; then \
	  $(SED) -i 's/-Werror//' $(tgt_src_dir)/fcoe-utils/configure.ac; \
	  cd $(tgt_src_dir)/fcoe-utils && ./bootstrap.sh; \
	fi
	cd $(tgt_src_dir)/fcoe-utils && HBAAPI_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
        HBAAPI_LIBS="$(LDFLAGS) -lHBAAPI -ldl" \
	LLDPAD_CFLAGS="-I$(IMAGE_DIR)/usr/include/lldpad" \
	LLDPAD_LIBS="$(LDFLAGS) -llldp_clif" \
	LIBHBALINUX_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
	LIBHBALINUX_LIBS="$(LDFLAGS) -lhbalinux" \
	./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)/fcoe-utils \
	LIBS="-lHBAAPI -ldl -lhbalinux -lrt"
	$(MAKE) --directory=$(tgt_src_dir)/fcoe-utils DESTDIR=$(IMAGE_DIR) \
	install-exec
	$(MAKE) --directory=$(tgt_src_dir)/fcoe-utils DESTDIR=$(IMAGE_DIR) \
	install-man
	$(INSTALL) $(tgt_src_dir)/fcoe-utils/contrib/*.sh $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) $(tgt_src_dir)/fcoe-utils/debug/*.sh $(IMAGE_DIR)/usr/sbin/
	$(call clean_la_files,libHBAAPI)
	$(call clean_la_files,libhbalinux)
	$(TOUCH) $(@)

open-lldp: glibc libconfig libnl
	$(SED) -i 's/^AC_FUNC_MALLOC/dnl AC_FUNC_MALLOC/' \
	$(tgt_src_dir)/configure.ac
	$(SED) -i 's/^AC_FUNC_REALLOC/dnl AC_FUNC_REALLOC/' \
	$(tgt_src_dir)/configure.ac
	$(SED) -i 's/foreign/foreign subdir-objects/' \
	$(tgt_src_dir)/configure.ac
	$(SED) -i 's/-Werror//' $(tgt_src_dir)/Makefile.am
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  cd $(tgt_src_dir) && libtoolize; \
	  cd $(tgt_src_dir) && ./bootstrap.sh; \
	fi
	cd $(tgt_src_dir) && LIBCONFIG_CFLAGS="-I$(IMAGE_DIR)/usr/include" \
	LIBCONFIG_LIBS="$(LDFLAGS) -lconfig" \
	LIBNL_CFLAGS="-I$(IMAGE_DIR)/usr/include/netlink" \
	LIBNL_LIBS="$(LDFLAGS) -lnl" ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install-lldpad_includeHEADERS
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install-lldpadconfigDATA
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-man 
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install-pkgconfigDATA
	$(call clean_la_files,liblldp_clif)
	$(TOUCH) $(@)

libconfig: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libconfig)
	$(TOUCH) $(@)

libnl: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) CC="$(cc_base)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

libpciaccess: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libpciaccess)
	$(TOUCH) $(@)

linux_firmware:
	$(MKDIR) $(IMAGE_DIR)/lib/firmware
	$(CP) $(tgt_src_dir)/WHENCE $(IMAGE_DIR)/lib/firmware/
	$(CP) -r $(tgt_src_dir)/bnx2* $(IMAGE_DIR)/lib/firmware/
	$(CP) $(tgt_src_dir)/LICENCE.chelsio_firmware $(IMAGE_DIR)/lib/firmware/
	$(CP) -r $(tgt_src_dir)/cxgb* $(IMAGE_DIR)/lib/firmware/
	$(CP) -r $(tgt_src_dir)/qlogic $(IMAGE_DIR)/lib/firmware/
	$(TOUCH) $(@)

dlm: glibc corosync
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" USE_SD_NOTIFY=no
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(RM) $(IMAGE_DIR)/lib/udev
	$(TOUCH) $(@)

ipmitool: glibc openssl ncurses readline libedit
	cd $(tgt_src_dir) && \
	LIBS="-ltinfo -lncurses -lreadline -ledit" \
	./configure --prefix=/usr --enable-intf-lan --enable-intf-lanplus
	$(MAKE) --directory=$(tgt_src_dir) \
	LIBS="-lreadline -ltinfo -lncurses -lcrypto -ledit"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

sysklogd: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) prefix=$(IMAGE_DIR) install_exec
	$(INSTALL) -D $(tgt_src_dir)/sysklogd.8 \
	$(IMAGE_DIR)/usr/share/man/man8/sysklogd.8
	$(INSTALL) -D $(tgt_src_dir)/syslogd.8 \
	$(IMAGE_DIR)/usr/share/man/man8/syslogd.8
	$(INSTALL) -D $(tgt_src_dir)/syslog.conf.5 \
	$(IMAGE_DIR)/usr/share/man/man5/syslog.conf.5
	$(INSTALL) -D $(tgt_src_dir)/klogd.8 \
	$(IMAGE_DIR)/usr/share/man/man8/klogd.8
	$(TOUCH) $(@)

less: glibc ncurses
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

irqbalance: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-glib2
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

ethtool: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

postgresql: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-readline
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/src/bin DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/src/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/src/interfaces/libpq \
	DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

psycopg2: glibc Python postgresql
	cd $(tgt_src_dir) && CC="$(esos_cc)" $(WORK_DIR)/python ./setup.py \
	build_ext --pg-config=$(IMAGE_DIR)/usr/bin/pg_config install \
	--prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

mysql: glibc ncurses
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-server \
	--without-bench --enable-thread-safe-client
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/libmysql \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libmysql_r \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/scripts \
	DESTDIR=$(IMAGE_DIR) install-binSCRIPTS
	$(MAKE) --directory=$(tgt_src_dir)/include DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/extra DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libmysqlclient)
	$(TOUCH) $(@)

MySQLdb: glibc Python mysql
	$(SED) -i "s/^#mysql_config.*/mysql_config=\
	$(subst /,\/,$(IMAGE_DIR)/usr/bin/mysql_config)/" $(tgt_src_dir)/site.cfg
	$(SED) -i "s/sys.executable/'$(subst /,\/,$(WORK_DIR))\/python'/g" \
	$(tgt_src_dir)/distribute_setup.py
	cd $(tgt_src_dir) && CC="$(esos_cc)" \
	LD_LIBRARY_PATH="/lib:/usr/lib:/lib64:/usr/lib64:/lib/x86_64-linux-gnu:\
	/usr/lib/x86_64-linux-gnu:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib" \
	$(WORK_DIR)/python ./setup.py build
	cd $(tgt_src_dir) && $(WORK_DIR)/python ./setup.py install \
	--prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

SQLAlchemy: glibc Python psycopg2 MySQLdb
	cd $(tgt_src_dir) && CC="$(esos_cc)" $(WORK_DIR)/python ./setup.py \
	install --prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

infiniband-diags: glibc libibumad libibverbs libibmad opensm
	cd $(tgt_src_dir) && CPPFLAGS="$(CPPFLAGS) \
	-idirafter $(IMAGE_DIR)/usr/include/infiniband" \
	./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libibnetdisc)
	$(TOUCH) $(@)

libibmad: glibc libibumad libibverbs
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libibmad)
	$(TOUCH) $(@)

lockfile: glibc Python
	cd $(tgt_src_dir) && $(WORK_DIR)/python ./setup.py \
	install --prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

python-daemon: glibc Python lockfile setuptools
	cd $(tgt_src_dir) && $(WORK_DIR)/python ./setup.py \
	install --prefix=$(IMAGE_DIR)/usr
	$(TOUCH) $(@)

nrpe: glibc openssl
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc \
	--enable-ssl --with-ssl-inc=$(IMAGE_DIR)/usr/include/openssl \
	--with-ssl-lib=$(IMAGE_DIR)/usr/lib --enable-command-args
	$(OPENSSL) dhparam -noout -C 512 > $(tgt_src_dir)/include/dh.h
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	NAGIOS_INSTALL_OPTS="" NRPE_INSTALL_OPTS="" install
	$(TOUCH) $(@)

bcache-tools: glibc util-linux openssl
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" \
	LDLIBS="-lssl -lcrypto -ldl -lblkid -luuid" \
	CFLAGS="-I$(IMAGE_DIR)/usr/include/blkid \
	-I$(IMAGE_DIR)/usr/include/uuid"
	$(INSTALL) -m 0755 $(tgt_src_dir)/make-bcache $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/bcache-super-show $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/probe-bcache $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/bcache-register $(IMAGE_DIR)/usr/libexec/
	$(INSTALL) -m 0644 $(tgt_src_dir)/*.8 $(IMAGE_DIR)/usr/share/man/man8/
	$(TOUCH) $(@)

EnhanceIO: glibc
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/$(notdir $(tgt_src_dir)).patch
	$(INSTALL) -m 0755 $(tgt_src_dir)/CLI/eio_cli $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) -m 0644 $(tgt_src_dir)/CLI/eio_cli.8 \
	$(IMAGE_DIR)/usr/share/man/man8/
	$(TOUCH) $(@)

util-linux: glibc ncurses zlib
	$(SED) -i 's/cfdisk_LDADD += @NCURSES_LIBS@/\
	cfdisk_LDADD += -ltinfo @NCURSES_LIBS@/' $(tgt_src_dir)/fdisks/Makemodule.am
	cd $(tgt_src_dir) && ./autogen.sh
	cd $(tgt_src_dir) && ./configure --prefix=/usr --disable-most-builds \
	--disable-bash-completion --with-ncurses --disable-silent-rules \
	--without-udev --disable-setpriv
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) install-usrlib_execLTLIBRARIES \
	DESTDIR=$(IMAGE_DIR)
	$(MAKE) --directory=$(tgt_src_dir) install-data-recursive \
	DESTDIR=$(IMAGE_DIR)
	$(call clean_la_files,libcommon)
	$(call clean_la_files,libuuid)
	$(call clean_la_files,libmount)
	$(call clean_la_files,libblkid)
	$(TOUCH) $(@)

thin-provisioning-tools: glibc gcc expat boost
	- $(PATCH) -r - -N -d $(tgt_src_dir) -p1 < \
	$(SRC_DIR)/misc/thin-provisioning-tools-0.2.8.patch
	$(QUIET) if [ ! -f "$(tgt_src_dir)/configure" ]; then \
	  cd $(tgt_src_dir) && autoconf; \
	fi
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) V="" CXX="$(esos_cxx) -D_GLIBCXX_BITSET"
	$(MAKE) --directory=$(tgt_src_dir) install MANDIR=/usr/share/man \
	DESTDIR=$(IMAGE_DIR)
	$(TOUCH) $(@)

expat: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) prefix=$(IMAGE_DIR)/usr \
	man1dir=$(IMAGE_DIR)/usr/share/man/man1 install
	$(call clean_la_files,libexpat)
	$(TOUCH) $(@)

boost: glibc gcc
	$(SED) -i 's/# using gcc ;/using gcc : : $(subst /,\/,$(esos_cxx)) : \
	<compileflags>"$(subst /,\/,$(CPPFLAGS))" \
	<linkflags>"$(subst /,\/,$(LDFLAGS))" ;/' \
	$(tgt_src_dir)/tools/build/v2/user-config.jam
	$(QUIET) if [ ! -f "$(tgt_src_dir)/b2" ]; then \
	  cd $(tgt_src_dir) && CC="" CXX="" ./bootstrap.sh \
	  --prefix=$(IMAGE_DIR)/usr; \
	fi
	cd $(tgt_src_dir) && ./b2 install --without-atomic --without-chrono \
	--without-context --without-coroutine --without-date_time \
	--without-exception --without-filesystem --without-graph \
	--without-graph_parallel --without-iostreams --without-locale \
	--without-log --without-math --without-mpi \
	--without-python --without-random --without-regex \
	--without-serialization --without-signals --without-system \
	--without-test --without-timer --without-wave
	$(TOUCH) $(@)

btier: glibc
	$(CC) -Wall -D_FILE_OFFSET_BITS=64 $(tgt_src_dir)/cli/btier_setup.c \
	-o $(tgt_src_dir)/cli/btier_setup
	$(CC) -Wall -D_FILE_OFFSET_BITS=64 $(tgt_src_dir)/cli/btier_inspect.c \
	-o $(tgt_src_dir)/cli/btier_inspect
	$(CC) -Wall $(tgt_src_dir)/tools/writetest.c -o $(tgt_src_dir)/tools/writetest
	$(CC) -Wall $(tgt_src_dir)/tools/show_block_details.c \
	-o $(tgt_src_dir)/tools/show_block_details
	$(INSTALL) -D -m 755 $(tgt_src_dir)/cli/btier_setup \
	$(IMAGE_DIR)/usr/sbin/btier_setup
	$(INSTALL) -D -m 755 $(tgt_src_dir)/cli/btier_inspect \
	$(IMAGE_DIR)/usr/sbin/btier_inspect
	$(INSTALL) -D -m 644 $(tgt_src_dir)/man/btier_setup.1 \
	$(IMAGE_DIR)/usr/share/man/man1/btier_setup.1
	$(INSTALL) -D -m 644 $(tgt_src_dir)/man/btier_inspect.1 \
	$(IMAGE_DIR)/usr/share/man/man1/btier_inspect.1
	$(TOUCH) $(@)

librdmacm: glibc libibverbs
	cd $(tgt_src_dir) && ./configure --prefix=/usr --mandir=/usr/share/man
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,librdmacm)
	$(TOUCH) $(@)

sysstat: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(INSTALL) -m 0755 $(tgt_src_dir)/iostat $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/mpstat $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/pidstat $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/nfsiostat $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 0755 $(tgt_src_dir)/cifsiostat $(IMAGE_DIR)/usr/bin/
	$(INSTALL) -m 0644 $(tgt_src_dir)/man/iostat.1 \
	$(IMAGE_DIR)/usr/share/man/man1/
	$(INSTALL) -m 0644 $(tgt_src_dir)/man/mpstat.1 \
	$(IMAGE_DIR)/usr/share/man/man1/
	$(INSTALL) -m 0644 $(tgt_src_dir)/man/pidstat.1 \
	$(IMAGE_DIR)/usr/share/man/man1/
	$(INSTALL) -m 0644 $(tgt_src_dir)/man/nfsiostat.1 \
	$(IMAGE_DIR)/usr/share/man/man1/
	$(INSTALL) -m 0644 $(tgt_src_dir)/man/cifsiostat.1 \
	$(IMAGE_DIR)/usr/share/man/man1/
	$(TOUCH) $(@)

pciutils: glibc zlib
	$(MAKE) --directory=$(tgt_src_dir) PREFIX=/usr
	$(MAKE) --directory=$(tgt_src_dir) PREFIX=/usr DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

tar: glibc acl
	cd $(tgt_src_dir) && \
	am__tar='tar chf - "$$tardir"' am__untar='tar xf -' \
	am_cv_prog_tar_ustar='fake_ustar_cmd' FORCE_UNSAFE_CONFIGURE=1 \
	./configure --prefix=/usr --without-selinux
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

net-snmp: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr \
	--with-default-snmp-version="3" --with-sys-contact="@@no.where" \
	--with-sys-location="Unknown" --with-logfile="/var/log/snmpd.log" \
	--with-persistent-directory="/var/lib/net-snmp" \
	--without-perl-modules --enable-embedded-perl --disable-perl-cc-checks \
	--without-python-modules --without-mysql --sysconfdir=/etc \
	--enable-minimalist --disable-deprecated \
	--with-mib-modules="ucd-snmp/diskio etherlike-mib" --disable-manuals \
	--disable-scripts --enable-ipv6
	$(MAKE) --jobs=1 --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libnetsnmp)
	$(TOUCH) $(@)

nut: glibc net-snmp libusb_compat freeipmi
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc \
	--without-dev --with-serial --with-usb --with-snmp --without-cgi \
	--with-user=nutmon --with-group=nut --without-avahi \
	--with-usb-libs="-lusb" --with-snmp-libs="-lnetsnmp" \
	--with-ipmi --with-freeipmi --with-freeipmi-libs="-lfreeipmi"
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/common DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/clients DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/data DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/docs DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/drivers DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/lib DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/server DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libnut)
	$(call clean_la_files,libupsclient)
	$(TOUCH) $(@)

libusb: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libusb-1.0)
	$(TOUCH) $(@)

libusb_compat: glibc libusb
	cd $(tgt_src_dir) && \
	LIBUSB_1_0_CFLAGS="-I$(IMAGE_DIR)/usr/include/libusb-1.0" \
	LIBUSB_1_0_LIBS="-lusb-1.0" ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libusb)
	$(TOUCH) $(@)

freeipmi: glibc libgcrypt
	cd $(tgt_src_dir) && am_cv_prog_tar_ustar='fake_ustar_cmd' ./configure \
	--prefix=/usr --sysconfdir=/etc --localstatedir=/var \
	--disable-init-scripts
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/common DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libfreeipmi DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libipmiconsole \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libipmimonitoring \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/libipmidetect \
	DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/man DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/bmc-info DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/bmc-device DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/bmc-watchdog DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-chassis DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-config DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-dcmi DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-fru DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-oem DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-pet DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-raw DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-sel DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-sensors DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmi-locate DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmiconsole DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmidetect DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmidetectd DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmiping DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmipower DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/ipmiseld DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/rmcpping DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(tgt_src_dir)/contrib DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libfreeipmi)
	$(call clean_la_files,libipmi)
	$(TOUCH) $(@)

libgcrypt: glibc libgpg-error
	cd $(tgt_src_dir) && \
	GPG_ERROR_CONFIG="$(IMAGE_DIR)/usr/bin/gpg-error-config" \
	./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libgcrypt)
	$(TOUCH) $(@)

libgpg-error: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libgpg-error)
	$(TOUCH) $(@)

smartmontools: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc \
	--with-initscriptdir=no
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-sbinPROGRAMS
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-sbinSCRIPTS
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install-data
	$(TOUCH) $(@)

cryptsetup: glibc libgcrypt LVM2 util-linux popt
	cd $(tgt_src_dir) && ./configure --prefix=/usr --disable-selinux \
	--disable-udev --with-crypto_backend=gcrypt \
	--with-libgcrypt-prefix=$(IMAGE_DIR)/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libtcrypt)
	$(call clean_la_files,libcryptsetup)
	$(TOUCH) $(@)

popt: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --disable-static
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libpopt)
	$(TOUCH) $(@)

mtx: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) prefix=$(IMAGE_DIR)/usr install
	$(TOUCH) $(@)

mt-st: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) SBINDIR=$(IMAGE_DIR)/usr/sbin \
	BINDIR=$(IMAGE_DIR)/usr/bin MANDIR=$(IMAGE_DIR)/usr/share/man install
	$(TOUCH) $(@)

nagios-plugins: glibc
	$(SED) -i -e '/gets is a security/d' $(tgt_src_dir)/gl/stdio.in.h
	cd $(tgt_src_dir) && ./configure --prefix=/usr --without-gnutls \
	--without-pgsql --without-mysql --without-dbi --without-radius \
	--without-ldap --with-ipv6 --with-perl=/usr/bin/perl \
	--with-openssl=$(IMAGE_DIR)/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

ceph: glibc util-linux keyutils libedit snappy leveldb boost Python
	cd $(tgt_src_dir) && NSS_CFLAGS="-I$(IMAGE_DIR)/usr/include/nss" \
	NSS_LIBS="-lnss3 -lssl3 -lnssutil3 -lnspr4 -lsmime3" \
	LIBEDIT_CFLAGS="-I$(IMAGE_DIR)/usr/include/editline" \
	LIBEDIT_LIBS="-ledit -ltinfo" PYTHON="$(WORK_DIR)/python" \
	./configure --prefix=/usr \
	--without-tcmalloc --without-libatomic-ops --without-radosgw \
	--without-libxfs --without-fuse --with-nss --without-cryptopp
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/src DESTDIR=$(IMAGE_DIR) \
	install_sh_PROGRAM="$(tgt_src_dir)/install-sh -c -s" \
	INSTALL_PROGRAM="$(tgt_src_dir)/install-sh -c -s" \
	INSTALL_STRIP_FLAG="-s" "INSTALL_PROGRAM_ENV=STRIPPROG='strip'" \
	bin_PROGRAMS="rbd" install-binPROGRAMS
	$(call clean_la_files,librados)
	$(call clean_la_files,librbd)
	$(call clean_la_files,libcephfs)
	$(TOUCH) $(@)

keyutils: glibc
	$(SED) -i 's/$$(LNS) $$(LIBDIR)\//$$(LNS) /' $(tgt_src_dir)/Makefile
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" LDFLAGS="$(LDFLAGS)"
	$(MAKE) --directory=$(tgt_src_dir) LIBDIR=/usr/lib USRLIBDIR=/usr/lib \
	DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

libedit: glibc ncurses
	cd $(tgt_src_dir) && ./configure --prefix=/usr --enable-shared
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libedit)
	$(TOUCH) $(@)

leveldb: glibc snappy
	$(MAKE) --directory=$(tgt_src_dir) CC="gcc" CXX="g++"
	$(INSTALL) -m 0755 $(tgt_src_dir)/libleveldb.so.1.15 \
        $(IMAGE_DIR)/usr/lib/
	$(LN) libleveldb.so.1.15 $(IMAGE_DIR)/usr/lib/libleveldb.so.1
	$(LN) libleveldb.so.1.15 $(IMAGE_DIR)/usr/lib/libleveldb.so
	$(CP) -R $(tgt_src_dir)/include/leveldb $(IMAGE_DIR)/usr/include/
	$(TOUCH) $(@)

libmcrypt: glibc gcc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --mandir=/usr/share/man
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) install
	$(call clean_la_files,libmcrypt)
	$(TOUCH) $(@)

nsca: glibc libmcrypt
	cd $(tgt_src_dir) && \
	LD_LIBRARY_PATH=$(IMAGE_DIR)/usr/lib: \
	LIBMCRYPT_CONFIG=$(IMAGE_DIR)/usr/bin/libmcrypt-config \
	./configure --prefix=/usr \
	--with-mcrypt-lib=$(IMAGE_DIR)/usr/lib \
	--with-mcrypt-inc=$(IMAGE_DIR)/usr/include
	$(MAKE) --directory=$(tgt_src_dir)
	$(INSTALL) -m 0755 $(tgt_src_dir)/src/send_nsca $(IMAGE_DIR)/usr/sbin/
	$(TOUCH) $(@)

btrfs-progs: glibc util-linux attr zlib acl e2fsprogs
	$(SED) -i 's/ build-Documentation//' $(tgt_src_dir)/Makefile
	$(SED) -i 's/ install-Documentation//' $(tgt_src_dir)/Makefile
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)"
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	prefix="/usr" install
	$(TOUCH) $(@)

attr: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install install-lib install-dev
	$(call clean_la_files,libattr)
	$(TOUCH) $(@)

acl: glibc attr
	cd $(tgt_src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install install-lib
	$(MAKE) --directory=$(tgt_src_dir)/include \
	PKG_INC_DIR=$(IMAGE_DIR)/usr/include install-dev
	$(call clean_la_files,libacl)
	$(TOUCH) $(@)

htop: glibc ncurses
	cd $(tgt_src_dir) && LIBS="-ltinfo" ./configure --prefix=/usr \
	--disable-unicode
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) DESTDIR=$(IMAGE_DIR) \
	install-binPROGRAMS install-man1
	$(TOUCH) $(@)

dmidecode: glibc
	$(MAKE) --directory=$(tgt_src_dir) CC="$(esos_cc)" prefix=/usr
	$(MAKE) --directory=$(tgt_src_dir) install prefix=/usr \
	DESTDIR=$(IMAGE_DIR)
	$(TOUCH) $(@)

xmlrpc-c: glibc gcc curl libxml2
	cd $(tgt_src_dir) && PATH="$$PATH:$(WORK_DIR)" \
	./configure --prefix=/usr --disable-wininet-client \
	--disable-libwww-client --disable-cgi-server --enable-curl-client \
	--enable-libxml2-backend
	PATH="$$PATH:$(WORK_DIR)" $(MAKE) -j1 --directory=$(tgt_src_dir)
	PATH="$$PATH:$(WORK_DIR)" $(MAKE) --directory=$(tgt_src_dir) \
	DESTDIR=$(IMAGE_DIR) install
	PATH="$$PATH:$(WORK_DIR)" $(MAKE) --directory=$(tgt_src_dir)/tools/xmlrpc
	$(INSTALL) -vD -m 755 $(tgt_src_dir)/tools/xmlrpc/xmlrpc \
	$(IMAGE_DIR)/usr/bin/xmlrpc
	$(TOUCH) $(@)

stunnel: glibc openssl
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc \
	--with-ssl="$(IMAGE_DIR)/usr"
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir)/src DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(tgt_src_dir)/doc DESTDIR=$(IMAGE_DIR) install-data
	$(call clean_la_files,libstunnel)
	$(TOUCH) $(@)

sudo: glibc
	cd $(tgt_src_dir) && VIPROG="/bin/vi" MVPROG="/bin/mv" \
	./configure --prefix=/usr --with-editor="/bin/vi" --with-env-editor
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) INSTALL_OWNER="" \
	DESTDIR=$(IMAGE_DIR) install SUBDIRS="lib/util plugins/group_file \
	plugins/sudoers plugins/system_group src include doc"
	$(FIND) $(IMAGE_DIR)/usr/libexec/sudo -type f -iname *.la \
	-exec $(RM) {} \;
	$(TOUCH) $(@)

rsync: glibc
	cd $(tgt_src_dir) && ./configure --prefix=/usr --sysconfdir=/etc
	$(MAKE) --directory=$(tgt_src_dir)
	$(MAKE) --directory=$(tgt_src_dir) install DESTDIR=$(IMAGE_DIR)
	$(TOUCH) $(@)

