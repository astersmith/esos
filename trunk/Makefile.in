# $Id$

# ESOS Makefile[.in]
# Makefile is generated from Makefile.in via the configure script.
# Please see the README/INSTALL documents for help.

CWD		:= $(shell pwd)
WORK_DIR	:= $(CWD)/work
DISTFILES_DIR	:= $(WORK_DIR)/distfiles
BUILD_DIR	:= $(WORK_DIR)/build
IMAGE_DIR	:= $(WORK_DIR)/image
INITRAMFS_DIR	:= $(WORK_DIR)/initramfs
MOUNT_DIR	:= $(WORK_DIR)/mnt

QUIET		:= @
STRIP		:= -s

# Not sure if this is staying or not
SHELL		:= /bin/bash

WGET		:= @wget@ -t 5
MKDIR		:= @mkdir@ -p
RM		:= @rm@ -rf
TAR		:= @tar@
CP		:= @cp@ -L
FIND		:= @find@
CPIO		:= @cpio@
GZIP		:= @gzip@ -9
ECHO		:= @echo@
SFDISK		:= @sfdisk@
CAT		:= @cat@
TEST		:= @test@
GREP		:= @grep@
DD		:= @dd@
MKE2FS		:= @mke2fs@
LN		:= @ln@ -sf
MOUNT		:= @mount@
UMOUNT		:= @umount@
SED		:= @sed@
MKNOD		:= @mknod@
TOUCH		:= @touch@
INSTALL		:= @install@ -c
PATCH		:= @patch@
CHOWN		:= @chown@
CHMOD		:= @chmod@
MD5SUM		:= @md5sum@
SHA256SUM	:= @sha256sum@
SLEEP		:= @sleep@
LOSETUP		:= @losetup@
KPARTX		:= @kpartx@
XARGS		:= @xargs@

esos_ver	:= 0.1-r$(shell svnversion $(CWD))
prod_suffix	:= -esos.prod
debug_suffix	:= -esos.debug

distfiles	= $(addprefix $(DISTFILES_DIR)/, \
		busybox-1.19.0.tar.bz2 \
		grub-2.00.tar.gz \
		sysvinit-2.88dsf.tar.bz2 \
		glibc-2.12.2.tar.bz2 \
		vixie-cron-4.1.tar.bz2 \
		libibumad-1.3.7.tar.gz \
		libibverbs-1.1.4.tar.gz \
		srptools-0.0.4.tar.gz \
		openssh-5.8p1.tar.gz \
		ssmtp-2.64.tar.bz2 \
		perl-5.12.4.tar.bz2 \
		openssl-1.0.0e.tar.gz \
		e2fsprogs-1.41.14.tar.gz \
		zlib-1.2.5.tar.bz2 \
		lsscsi-0.25.tar.gz \
		sg3_utils-1.33.tar.gz \
		groff-1.21.tar.gz \
		ncurses-5.7.tar.gz \
		qlogic_fw-20120101.tar.gz \
		linux-3.2.6.tar.bz2 \
		iniparser-3.1.tar.gz \
		cdk-5.0-20120323.tar.gz \
		scst-trunk_r4130.tar.bz2 \
		kexec-tools-2.0.3.tar.gz \
		drbd-8.3.11.tar.gz \
		LVM2-2.02.97.tar.gz \
		xfsprogs-3.1.8.tar.gz \
		mdadm-3.2.6.tar.gz \
		parted-2.3.tar.gz \
		gcc-4.4.5_gmp_mpfr.tar.bz2 \
		opensm-3.3.15.tar.gz)
distfiles_repo	= http://enterprise-storage-os.googlecode.com/files

build_targets		:= scst_kernel$(prod_suffix) scst_kernel$(debug_suffix) \
			kernel_headers esos_tui busybox sysvinit grub glibc perl \
			qlogic_fw scstadmin openssh vixie-cron gcc openssl zlib \
			ncurses e2fsprogs ssmtp libibumad libibverbs srptools \
			lsscsi sg3_utils groff kexec-tools iniparser cdk LVM2 \
			xfsprogs drbd mdadm parted opensm
clean_targets		:= $(addprefix clean-,$(build_targets))
src_dir			= $(wildcard $(BUILD_DIR)/$(@)-*)
linux_src		= $(wildcard $(BUILD_DIR)/linux-*)
tarball_src_dirs	= $(addprefix $(BUILD_DIR)/,$(subst .tar.bz2,,$(subst .tar.gz,,$(notdir $(distfiles)))))

# The 'fake_lib' directory deserves a little explanation; after glibc
# is built, we put modified ld scripts (eg, libc.so) in this location,
# this way our new libraries are found/used during link
export LDFLAGS = -L$(WORK_DIR)/fake_lib -L$(IMAGE_DIR)/lib -L$(IMAGE_DIR)/usr/lib -Wl,-rpath-link,$(IMAGE_DIR)/lib -Wl,-rpath-link,$(IMAGE_DIR)/usr/lib
export CPPFLAGS = -I$(IMAGE_DIR)/usr/include -I$(WORK_DIR)/kernel_headers/include


# all - The default goal; complete every target except install.
.PHONY: all
all: fetch extract build ;


# image - Create the ESOS disk image file.
.PHONY: image
image: img_file = $(CWD)/esos-$(esos_ver).img
image: loop_dev = $$($(CAT) $(WORK_DIR)/loop_dev)
image: $(build_targets)
	$(QUIET) if [ `whoami` != "root" ]; then \
	  $(ECHO) "### Snap! Ya gotta be root for this part..."; \
	  exit 1; \
	fi
	$(QUIET) $(ECHO) "### Creating initramfs image..."
	$(RM) $(INITRAMFS_DIR)/dev/*
	$(MKNOD) $(INITRAMFS_DIR)/dev/null c 1 3
	$(MKNOD) $(INITRAMFS_DIR)/dev/console c 5 1
	$(MKNOD) $(INITRAMFS_DIR)/dev/tty c 5 0
	$(INSTALL) $(CWD)/misc/initramfs_init $(INITRAMFS_DIR)/init
	$(LN) busybox $(INITRAMFS_DIR)/bin/sh
	cd $(INITRAMFS_DIR) && $(FIND) . -print0 |	\
	$(CPIO) --null -ov --format=newc |		\
	$(GZIP) > $(IMAGE_DIR)/boot/initramfs.cpio.gz
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### Setting up ESOS image file ($(img_file))..."
	# 4000 MB (not MiB)
	# 4000000000 B
	# 4000000000 B / 512 B = 7812500 sectors
	$(DD) if=/dev/zero of=$(img_file) bs=512 count=0 seek=7812500
	$(ECHO) -e "4097,204800,L,*\n208897,1024000,L\n1232897,204800,L\n1437697,4096000,L\n" | \
	$(SFDISK) --no-reread -uS -L $(img_file)
	$(LOSETUP) -f --show $(img_file) > $(WORK_DIR)/loop_dev
	$(KPARTX) -a $(loop_dev)
	$(MKE2FS) -L esos_boot $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p1
	$(MKE2FS) -L esos_root $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p2
	$(MKE2FS) -L esos_conf $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p3
	$(MKE2FS) -L esos_logs $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p4
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### Installing image..."
	$(MKDIR) $(MOUNT_DIR)
	$(MOUNT) $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p2 $(MOUNT_DIR) 
	$(MKDIR) $(MOUNT_DIR)/boot
	$(MOUNT) $$($(ECHO) $(loop_dev) | $(SED) 's/^\/dev/\/dev\/mapper/')p1 $(MOUNT_DIR)/boot
	cd $(CWD)/etc && $(FIND) . -depth | $(CPIO) -pmdvu $(IMAGE_DIR)/etc
	cd $(IMAGE_DIR) && $(FIND) . -depth | $(CPIO) -pmdvu $(MOUNT_DIR)
	pkgdatadir=$(WORK_DIR) $(WORK_DIR)/grub-install \
	--grub-setup=$(WORK_DIR)/grub-bios-setup --grub-mkimage=$(WORK_DIR)/grub-mkimage \
	--grub-mkrelpath=$(WORK_DIR)/grub-mkrelpath --grub-probe=$(WORK_DIR)/grub-probe \
	--root-directory=$(MOUNT_DIR) --no-floppy $(loop_dev)
	$(SED) 's/@@esos_ver@@/$(esos_ver)/' $(CWD)/misc/grub.cfg > $(MOUNT_DIR)/boot/grub/grub.cfg
	$(LN) /usr/share/zoneinfo/posix/UTC $(MOUNT_DIR)/etc/localtime
	$(INSTALL) $(CWD)/scripts/conf_sync.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(CWD)/scripts/archive_logs.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(CWD)/scripts/startup.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(CWD)/scripts/health_chk.sh $(MOUNT_DIR)/usr/local/sbin/
	$(INSTALL) $(CWD)/scripts/dev_nodes.sh $(MOUNT_DIR)/usr/local/sbin/
	$(ECHO) "ESOS - Enterprise Storage OS $(esos_ver)" > $(MOUNT_DIR)/etc/esos-release
	$(TOUCH) -d "2001-01-01 00:00:00" $(MOUNT_DIR)/etc/*
	$(CHOWN) -R root:root $(MOUNT_DIR)/*
	$(FIND) $(MOUNT_DIR)/etc/ -type f -print0 | $(XARGS) -0 $(CHMOD) 0644
	$(FIND) $(MOUNT_DIR)/etc/ -type d -print0 | $(XARGS) -0 $(CHMOD) 0755
	$(FIND) $(MOUNT_DIR)/etc/rc.d/ -type f -print0 | $(XARGS) -0 $(CHMOD) 0755
	$(CHMOD) 4750 $(MOUNT_DIR)/usr/local/bin/esos_tui
	$(CHMOD) 600 $(MOUNT_DIR)/etc/shadow
	$(CHMOD) 600 $(MOUNT_DIR)/etc/crontab
	$(CHMOD) 1777 $(MOUNT_DIR)/tmp
	$(CHMOD) 1777 $(MOUNT_DIR)/var/tmp
	$(UMOUNT) $(MOUNT_DIR)/boot
	$(UMOUNT) $(MOUNT_DIR)
	$(KPARTX) -d $(loop_dev)
	$(LOSETUP) -d $(loop_dev)
	$(QUIET) $(ECHO) && $(ECHO)
	$(QUIET) $(ECHO) "### All done; your ESOS disk image file is ready!"


# pkg_dist - Create the ESOS package distribution file (tarball).
.PHONY: pkg_dist
pkg_dist: img_file = $(notdir $(wildcard $(CWD)/esos-*.img))
pkg_dist: $(img_file)
	$(CHMOD) +x $(CWD)/install.sh
	$(MD5SUM) $(img_file) > $(CWD)/dist_md5sum.txt
	$(SHA256SUM) $(img_file) > $(CWD)/dist_sha256sum.txt
	$(TAR) --transform 's,^,esos-$(esos_ver)/,' --show-transformed-names \
	-c -v -z -f $(CWD)/esos-$(esos_ver).tar.gz $(img_file) install.sh \
	INSTALL README COPYING dist_*.txt


# clean - Remove all temporary files and clean/distclean each package source directory.
.PHONY: clean
clean: $(clean_targets)
	$(RM) $(INITRAMFS_DIR)
	$(RM) $(IMAGE_DIR)
	$(RM) $(WORK_DIR)/fake_lib
	$(RM) $(CWD)/dist_*.txt
	$(RM) $(CWD)/esos-*.tar.gz
	$(RM) $(CWD)/esos-*.img

$(clean_targets):: target = $(subst clean-,,$(@))
$(clean_targets)::
	$(RM) $(target)

clean-esos_tui::
	$(MAKE) --directory=$(CWD)/tui clean


# distclean - Remove everything including build configuration settings.
.PHONY: distclean
distclean: clean
	$(RM) $(WORK_DIR)
	$(RM) autom4te.cache
	$(RM) configure
	$(RM) config.status
	$(RM) config.log
	$(RM) Makefile


# fetch - Grab all required packages from distribution file repositories.
fetch: $(distfiles) ;

$(distfiles):
	$(WGET) -P $(DISTFILES_DIR) $(distfiles_repo)/$(notdir $(@))


# checksum - Verify checksums for all distribution files.
.PHONY: checksum
checksum: fetch
	$(QUIET) $(ECHO) "### Verifying MD5 checksums..."
	$(QUIET) cd $(DISTFILES_DIR) && $(MD5SUM) -w -c $(CWD)/CHECKSUM.MD5
	$(QUIET) $(ECHO) "### Verifying SHA256 checksums..."
	$(QUIET) cd $(DISTFILES_DIR) && $(SHA256SUM) -w -c $(CWD)/CHECKSUM.SHA256


# extract - Extract all of the previously downloaded packages/archives.
extract: fetch checksum $(tarball_src_dirs) ;

$(tarball_src_dirs): src_file = $(wildcard $(DISTFILES_DIR)/$(notdir $(@)).*)
$(tarball_src_dirs):
	$(MKDIR) $(BUILD_DIR)
	$(QUIET) if [ "$(suffix $(src_file))" = ".gz" ]; then \
	  $(TAR) xvfz $(src_file) -C $(BUILD_DIR); \
	elif [ "$(suffix $(src_file))" = ".bz2" ]; then \
	  $(TAR) xvfj $(src_file) -C $(BUILD_DIR); \
	else \
	  $(ECHO) "### Unhandled file extension: $(suffix $(src_file))"; \
	  exit 1; \
	fi


# build - Configure/compile/build all of the required projects.
.PHONY: build
build: image_setup $(build_targets) ;

.PHONY: image_setup
image_setup:
	$(MKDIR) $(IMAGE_DIR)/{etc,bin,sbin,dev,proc,sys,root,home}
	$(MKDIR) $(IMAGE_DIR)/boot/grub
	$(MKDIR) $(IMAGE_DIR)/mnt/{root,conf,logs,vdisks}
	$(MKDIR) $(IMAGE_DIR)/lib/firmware
	$(MKDIR) $(IMAGE_DIR)/usr/{bin,sbin,libexec,lib}
	$(MKDIR) $(IMAGE_DIR)/usr/local/{bin,sbin}
	$(MKDIR) $(IMAGE_DIR)/opt/{bin,sbin,lib}
	$(INSTALL) -m 1777 -d $(IMAGE_DIR)/tmp
	$(MKDIR) $(IMAGE_DIR)/var/{spool,lock,run,state,cache,log}
	$(INSTALL) -m 755 -d $(IMAGE_DIR)/var/empty
	$(INSTALL) -m 1777 -d $(IMAGE_DIR)/var/tmp
	$(INSTALL) -m 710 -d $(IMAGE_DIR)/var/cron
	$(INSTALL) -m 700 -d $(IMAGE_DIR)/var/cron/tabs
	$(LN) lib $(IMAGE_DIR)/lib64
	$(LN) lib $(IMAGE_DIR)/usr/lib64
	$(MKDIR) $(INITRAMFS_DIR)/{bin,sbin,proc,sys,dev}
	$(MKDIR) $(INITRAMFS_DIR)/mnt/{root,tmp}
	$(MKDIR) $(INITRAMFS_DIR)/usr/{bin,sbin}

$(addprefix scst_kernel,$(prod_suffix) $(debug_suffix)): kernel_ver = $(subst linux-,,$(notdir $(linux_src)))
$(addprefix scst_kernel,$(prod_suffix) $(debug_suffix)): scst_src = $(wildcard $(BUILD_DIR)/scst-*)
$(addprefix scst_kernel,$(prod_suffix) $(debug_suffix)): kern_suffix = $(subst scst_kernel,,$(@))
$(addprefix scst_kernel,$(prod_suffix) $(debug_suffix)): glibc
	### Kernel prerequisites for SCST
	if [ ! -d $(linux_src)/scst_exec_req_fifo.patch ]; \
	then \
	  $(PATCH) -d $(linux_src) -b -B $(linux_src)/scst_exec_req_fifo.patch/ \
	  -p1 < $(scst_src)/scst/kernel/scst_exec_req_fifo-3.2.patch; \
	fi
	if [ ! -d $(linux_src)/put_page_callback.patch ]; \
	then \
	  $(PATCH) -d $(linux_src) -b -B $(linux_src)/put_page_callback.patch/ \
	  -p1 < $(scst_src)/iscsi-scst/kernel/patches/put_page_callback-3.2.patch; \
	fi
	$(RM) $(linux_src)/drivers/scsi/qla2xxx
	$(LN) $(scst_src)/qla2x00t $(linux_src)/drivers/scsi/qla2xxx
	### Setup for prod or debug
	$(MAKE) --directory=$(linux_src) clean
	$(MAKE) --directory=$(linux_src) distclean
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) clean
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) extraclean
	if [ "$(@)" = "scst_kernel$(prod_suffix)" ]; then \
	  $(SED) 's/CONFIG_LOCALVERSION\=\"\"/CONFIG_LOCALVERSION\=\"$(prod_suffix)\"/' \
	  $(CWD)/misc/$(notdir $(linux_src)).config > $(linux_src)/.config; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) 2perf; \
	fi
	if [ "$(@)" = "scst_kernel$(debug_suffix)" ]; then \
	  $(SED) 's/CONFIG_LOCALVERSION\=\"\"/CONFIG_LOCALVERSION\=\"$(debug_suffix)\"/' \
	  $(CWD)/misc/$(notdir $(linux_src)).config > $(linux_src)/.config; \
	  $(MAKE) --directory=$(scst_src) KDIR=$(linux_src) 2debug; \
	fi
	### Build/install the Linux kernel
	$(MAKE) --directory=$(linux_src)
	$(INSTALL) $(linux_src)/arch/x86_64/boot/bzImage $(IMAGE_DIR)/boot/bzImage$(kern_suffix)
	$(MAKE) --directory=$(linux_src) INSTALL_MOD_PATH=$(IMAGE_DIR) modules_install
	### Build/install SCST core and target drivers
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) scst
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) DESTDIR=$(IMAGE_DIR) INSTALL_DIR_H=$(IMAGE_DIR)/usr/include/scst scst_install
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) qla
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) INSTALL_MOD_PATH=$(IMAGE_DIR) qla_install
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) LOCAL_LD_FLAGS="$(LDFLAGS)" iscsi
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) SBINDIR=$(IMAGE_DIR)/usr/sbin INSTALL_MOD_PATH=$(IMAGE_DIR) iscsi_install
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) srpt
	$(MAKE) --directory=$(scst_src) KDIR=$(linux_src) KVER=$(kernel_ver)$(kern_suffix) INSTALL_MOD_PATH=$(IMAGE_DIR) srpt_install
	### Done
	$(TOUCH) $(@)

kernel_headers:
	$(MKDIR) $(WORK_DIR)/kernel_headers
	$(MAKE) --directory=$(linux_src) INSTALL_HDR_PATH="$(WORK_DIR)/kernel_headers" headers_install
	$(TOUCH) $(@)

esos_tui: glibc ncurses cdk iniparser parted
	$(MAKE) --directory=$(CWD)/tui
	$(INSTALL) -m 755 $(CWD)/tui/esos_tui $(IMAGE_DIR)/usr/local/bin
	$(TOUCH) $(@)

busybox: glibc
	- $(PATCH) -r - -N -d $(src_dir) -p1 < $(CWD)/misc/busybox-1.19.0.patch
	$(MAKE) --directory=$(src_dir) clean
	$(MAKE) --directory=$(src_dir) distclean
	$(SED) -e 's/.*CONFIG_STATIC.*/CONFIG_STATIC=y/' \
	$(CWD)/misc/$(notdir $(src_dir)).config > $(src_dir)/.config
	$(MAKE) --directory=$(src_dir)
	$(INSTALL) $(STRIP) $(src_dir)/busybox_unstripped $(WORK_DIR)/initramfs/bin/busybox
	$(MAKE) --directory=$(src_dir) clean
	$(MAKE) --directory=$(src_dir) distclean
	$(CP) $(CWD)/misc/$(notdir $(src_dir)).config $(src_dir)/.config
	$(MAKE) --directory=$(src_dir)
	$(INSTALL) $(STRIP) $(src_dir)/busybox_unstripped $(IMAGE_DIR)/bin/busybox
	$(INSTALL) -d $(IMAGE_DIR)/usr/share/udhcpc
	$(INSTALL) $(src_dir)/examples/udhcp/simple.script $(IMAGE_DIR)/usr/share/udhcpc/default.script
	$(TOUCH) $(@)

sysvinit: glibc
	$(MAKE) --directory=$(src_dir)/src SULOGINLIBS=-lcrypt LDFLAGS="$(LDFLAGS)" CPPFLAGS="$(CPPFLAGS)" CFLAGS="-O2 -fomit-frame-pointer"
	$(MAKE) --directory=$(src_dir)/src ROOT=$(IMAGE_DIR) install
	$(TOUCH) $(@)

grub: glibc LVM2
	cd $(src_dir) && ./configure --prefix=/usr --disable-grub-mkfont --enable-device-mapper
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(src_dir)/grub-core DESTDIR=$(IMAGE_DIR) install-platformDATA
	$(SED) 's/^prefix=.*/prefix=$(subst /,\/,$(IMAGE_DIR)/usr)/' $(IMAGE_DIR)/usr/sbin/grub-install > $(WORK_DIR)/grub-install
	$(CHMOD) +x $(WORK_DIR)/grub-install
	$(SED) 's/^prefix=.*/prefix=$(subst /,\/,$(IMAGE_DIR)/usr)/' $(src_dir)/grub-mkconfig_lib > $(WORK_DIR)/grub-mkconfig_lib
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 --library-path \"$(WORK_DIR)/fake_lib:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" $(IMAGE_DIR)/usr/sbin/grub-bios-setup \"\044\0100\"\n" > $(WORK_DIR)/grub-bios-setup
	$(CHMOD) +x $(WORK_DIR)/grub-bios-setup
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 --library-path \"$(WORK_DIR)/fake_lib:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" $(IMAGE_DIR)/usr/bin/grub-mkimage \"\044\0100\"\n" > $(WORK_DIR)/grub-mkimage
	$(CHMOD) +x $(WORK_DIR)/grub-mkimage
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 --library-path \"$(WORK_DIR)/fake_lib:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" $(IMAGE_DIR)/usr/bin/grub-mkrelpath \"\044\0100\"\n" > $(WORK_DIR)/grub-mkrelpath
	$(CHMOD) +x $(WORK_DIR)/grub-mkrelpath
	$(ECHO) -e "#! /bin/sh\n\n$(IMAGE_DIR)/lib/ld-linux-x86-64.so.2 --library-path \"$(WORK_DIR)/fake_lib:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib\" $(IMAGE_DIR)/usr/sbin/grub-probe \"\044\0100\"\n" > $(WORK_DIR)/grub-probe
	$(CHMOD) +x $(WORK_DIR)/grub-probe
	$(TOUCH) $(@)

glibc: kernel_headers
	- $(PATCH) -r - -N -d $(src_dir) -p1 < $(CWD)/misc/glibc-2.12.2.patch
	$(TOUCH) $(IMAGE_DIR)/etc/ld.so.conf
	$(MKDIR) $(WORK_DIR)/glibc-build
	cd $(WORK_DIR)/glibc-build && \
	CFLAGS="-O2 -U_FORTIFY_SOURCE -fno-stack-protector" LDFLAGS="" $(src_dir)/configure --prefix=/usr --without-selinux
	$(MAKE) --directory=$(WORK_DIR)/glibc-build LDFLAGS=""
	$(MAKE) --directory=$(WORK_DIR)/glibc-build install_root=$(IMAGE_DIR) install
	$(MKDIR) $(WORK_DIR)/fake_lib
	$(SED) 's/ \// $(subst /,\/,$(IMAGE_DIR))\//g' $(IMAGE_DIR)/usr/lib/libc.so > $(WORK_DIR)/fake_lib/libc.so
	$(SED) 's/ \// $(subst /,\/,$(IMAGE_DIR))\//g' $(IMAGE_DIR)/usr/lib/libpthread.so > $(WORK_DIR)/fake_lib/libpthread.so
	$(TOUCH) $(@)

perl: glibc
	cd $(src_dir) && CFLAGS="" ./configure.gnu --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) install.perl DESTDIR=$(IMAGE_DIR) INSTALLFLAGS="-f -o"
	$(TOUCH) $(@)

qlogic_fw:
	$(CP) $(src_dir)/*.bin $(IMAGE_DIR)/lib/firmware/
	$(TOUCH) $(@)

scstadmin: scst_src = $(wildcard $(BUILD_DIR)/scst-*)
scstadmin: perl_mod = $(wildcard $(scst_src)/scstadmin/scstadmin/scst-*)
scstadmin: perl_lib = $(wildcard $(IMAGE_DIR)/usr/lib/perl5/5.*)
scstadmin: perl
	cd $(perl_mod) && PERL5LIB="$(perl_lib)" $(IMAGE_DIR)/usr/bin/perl Makefile.PL \
	PREFIX=/usr DESTDIR=$(IMAGE_DIR) PERL_LIB="$(perl_lib)" PERL_ARCHLIB="$(perl_lib)/x86_64-linux"
	$(MAKE) --directory=$(perl_mod) PERL5LIB="$(perl_lib)"
	$(MAKE) --directory=$(perl_mod) PERL5LIB="$(perl_lib)" install
	$(INSTALL) -m 755 $(scst_src)/scstadmin/scstadmin/scstadmin $(IMAGE_DIR)/usr/sbin/
	$(TOUCH) $(@)

openssh: glibc zlib openssl
	cd $(src_dir) && LD_LIBRARY_PATH=/lib64:/usr/lib64:$(IMAGE_DIR)/lib:$(IMAGE_DIR)/usr/lib ./configure --prefix="" --exec-prefix=/usr --without-openssl-header-check
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install-files
	$(TOUCH) $(@)

vixie-cron: glibc
	$(MAKE) --directory=$(src_dir) LDFLAGS="$(LDFLAGS)" all
	$(INSTALL) $(STRIP) -m 111 $(src_dir)/cron $(IMAGE_DIR)/usr/sbin/
	$(INSTALL) $(STRIP) -m 4111 $(src_dir)/crontab $(IMAGE_DIR)/usr/bin/
	$(TOUCH) $(@)

gcc: glibc
	$(MKDIR) $(WORK_DIR)/gcc-build
	cd $(WORK_DIR)/gcc-build && $(src_dir)/configure --prefix=/usr --disable-multilib \
	--disable-nls --disable-bootstrap --enable-languages=c,c++
	$(MAKE) --directory=$(WORK_DIR)/gcc-build all-target-libgcc LDFLAGS_FOR_TARGET="$(LDFLAGS)" CPPFLAGS_FOR_TARGET="$(CPPFLAGS)" CFLAGS_FOR_TARGET="-B$(IMAGE_DIR)/usr/lib -g -O2 $(LDFLAGS) $(CPPFLAGS)"
	$(MAKE) --directory=$(WORK_DIR)/gcc-build DESTDIR=$(IMAGE_DIR) install-target-libgcc
	$(MAKE) --directory=$(WORK_DIR)/gcc-build all-target-libstdc++-v3 LDFLAGS_FOR_TARGET="$(LDFLAGS)" CPPFLAGS_FOR_TARGET="$(CPPFLAGS)" CFLAGS_FOR_TARGET="-B$(IMAGE_DIR)/usr/lib -g -O2 $(LDFLAGS) $(CPPFLAGS)"
	$(MAKE) --directory=$(WORK_DIR)/gcc-build DESTDIR=$(IMAGE_DIR) install-target-libstdc++-v3
	$(TOUCH) $(@)

openssl: glibc
	cd $(src_dir) && ./config shared --prefix=/usr $(CPPFLAGS) $(LDFLAGS)
	$(SED) -i '/LD_LIBRARY_PATH/d' $(src_dir)/Makefile.shared
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) INSTALL_PREFIX=$(IMAGE_DIR) install_sw
	$(TOUCH) $(@)

zlib: glibc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

ncurses: glibc gcc
	- $(PATCH) -r - -N -d $(src_dir) -p1 < $(CWD)/misc/ncurses-5.7.patch
	cd $(src_dir) && ./configure --prefix=/usr --with-shared --without-gpm
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

e2fsprogs: glibc
	$(MKDIR) $(WORK_DIR)/e2fsprogs-build
	cd $(WORK_DIR)/e2fsprogs-build && $(src_dir)/configure --prefix=/usr \
	--enable-elf-shlibs --sysconfdir=/etc
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(WORK_DIR)/e2fsprogs-build DESTDIR=$(IMAGE_DIR) install-libs
	$(TOUCH) $(@)

ssmtp: glibc openssl
	cd $(src_dir) && CFLAGS="$(CPPFLAGS) $(LDFLAGS) -lcrypto" ./configure \
	--enable-ssl --prefix="" --exec-prefix=/usr
	$(MAKE) --directory=$(src_dir) SSMTPCONFDIR=/etc
	$(INSTALL) $(STRIP) -m 755 $(src_dir)/ssmtp $(IMAGE_DIR)/usr/sbin/
	$(LN) ssmtp $(IMAGE_DIR)/usr/sbin/sendmail
	$(TOUCH) $(@)

libibumad: glibc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

libibverbs: glibc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

srptools: glibc libibumad libibverbs
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install-exec-am
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install-man
	$(TOUCH) $(@)

lsscsi: glibc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

sg3_utils: glibc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

groff: glibc gcc
	cd $(src_dir) && ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(LN) tbl $(IMAGE_DIR)/usr/bin/gtbl
	$(TOUCH) $(@)

kexec-tools: glibc
	cd $(src_dir) && LDFLAGS="$(LDFLAGS) --static" CPPFLAGS="" ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

iniparser: glibc
	$(MAKE) --directory=$(src_dir) CFLAGS="-O2 -fPIC -Wall $(CPPFLAGS)" LDFLAGS="$(LDFLAGS)"
	$(INSTALL) -m 0644 $(src_dir)/libiniparser.a $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 0755 $(src_dir)/libiniparser.so.0 $(IMAGE_DIR)/usr/lib/
	$(INSTALL) -m 0644 $(src_dir)/src/iniparser.h $(IMAGE_DIR)/usr/include/
	$(INSTALL) -m 0644 $(src_dir)/src/dictionary.h $(IMAGE_DIR)/usr/include/
	$(TOUCH) $(@)

cdk: glibc ncurses
	- $(PATCH) -r - -N -d $(src_dir) -p1 < $(CWD)/misc/cdk-5.0-20120323.patch
	cd $(src_dir) && ./configure --prefix=/usr --with-ncurses --with-libtool
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

LVM2: glibc
	cd $(src_dir) && ./configure --with-lvm1=none --disable-selinux --prefix=/usr --with-default-system-dir=/etc
	$(MAKE) --directory=$(src_dir) CLDFLAGS+="$(LDFLAGS)"
	$(MAKE) --directory=$(src_dir)/man DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(src_dir)/tools DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(src_dir)/libdm DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(src_dir)/scripts DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

xfsprogs: glibc e2fsprogs
	cd $(src_dir) && CFLAGS="$(CPPFLAGS) -D_LINUX_TYPES_H" ./configure --prefix=/usr
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DIST_ROOT=$(IMAGE_DIR) install
	$(TOUCH) $(@)

drbd: glibc
	cd $(src_dir) && ./configure --prefix=/ --without-legacy_utils \
	--without-km --without-udev --without-xen --without-pacemaker --without-heartbeat \
	--without-rgmanager --without-bashcompletion --with-distro=generic
	$(MAKE) --directory=$(src_dir) tools doc
	$(MAKE) --directory=$(src_dir)/user DESTDIR=$(IMAGE_DIR) install
	$(MAKE) --directory=$(src_dir)/documentation DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

mdadm: glibc
	$(MAKE) --directory=$(src_dir) LDFLAGS="$(LDFLAGS)"
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

parted: glibc e2fsprogs LVM2
	cd $(src_dir) && CPPFLAGS="-I$(IMAGE_DIR)/usr/include" ./configure --prefix=/usr --without-readline
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install
	$(TOUCH) $(@)

opensm: glibc gcc libibumad libibverbs
	cd $(src_dir) && ./configure --prefix=/usr --sysconfdir=/etc \
	--with-opensm-conf-sub-dir="" --disable-shared
	$(MAKE) --directory=$(src_dir)
	$(MAKE) --directory=$(src_dir) DESTDIR=$(IMAGE_DIR) install-data
	$(MAKE) --directory=$(src_dir)/opensm DESTDIR=$(IMAGE_DIR) install-exec
	$(MAKE) --directory=$(src_dir)/osmtest DESTDIR=$(IMAGE_DIR) install-exec
	$(TOUCH) $(@)

