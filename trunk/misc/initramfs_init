#! /bin/busybox sh
#
# $Id$

rescue_shell() {
	echo "Something bad happened; attempting to drop into a shell..."
	/bin/busybox --install -s
	exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
}

# Install BusyBox
/bin/busybox --install -s
sleep 10

# A few requirements
echo "Initializing tmpfs file system..."
mount -t proc none /proc
mount -t sysfs none /sys
mdev -s

# Catch if /proc/vmcore exists -- we capture the crash dump and reboot
if [ -e /proc/vmcore ]; then
	echo "It appears a crash dump kernel is running."
	echo "Saving /proc/vmcore to ESOS log file system..."
	mount $(findfs LABEL=esos_logs) /mnt/tmp || rescue_shell
	gzip -c /proc/vmcore > /mnt/tmp/vmcore-`date +"%s"`.gz || rescue_shell
	umount /mnt/tmp || rescue_shell
	reboot -f || rescue_shell
fi

# Make sure we have enough physical memory
if [ `cat /proc/meminfo | grep MemTotal | awk '{print $2}'` -lt 3800000 ]; then
	echo "This system doesn't have enough RAM (need at least 4 GB)!"
	rescue_shell
fi

# Mount up
mount -t tmpfs -o size=1024m tmpfs /mnt/root || rescue_shell
mount -o ro $(findfs LABEL=esos_root) /mnt/tmp || rescue_shell

# Setup the root file system
cd /mnt/tmp
spinner="/-\|"
spin_pos=0
find . -depth | cpio -pmdv --quiet /mnt/root | while read i; do
	printf "\b"${spinner:$spin_pos:1}
	spin_pos=$(( ( ${spin_pos} + 1 ) % 4 ))
done
printf "\b"
cd /
cp -a /dev/* /mnt/root/dev/
ln -s busybox /mnt/root/bin/sh
chroot /mnt/root /bin/sh -c "/bin/busybox --install -s"

# All done
umount /mnt/tmp
umount /proc
umount /sys

# Boot the real thing
exec switch_root /mnt/root /sbin/init
